/**
 * Represents an interface object of AttributesSets Api.
 *
 * @property {function} getAttributesByMarker - Get all attributes with data from the attribute sets.
 *
 * @property {function} getSingleAttributeByMarkerSet - Get a single attribute with data from the attribute sets.
 */
interface IAttributesSets {
    getAttributesByMarker(marker: string, langCode: string): Promise<Array<IAttributesSetsEntity>>;
    getSingleAttributeByMarkerSet(attributeMarker: string, setMarker: string, langCode: string): Promise<IAttributesSetsEntity>;
}
interface IListTitle {
    title: string;
    value: number | string;
    position: string | number | null;
    extended: {
        value: string | null;
        type: string | null;
    };
}
type AttributeType = 'string' | 'text' | 'textWithHeader' | 'integer' | 'real' | 'float' | 'dateTime' | 'date' | 'time' | 'file' | 'image' | 'groupOfImages' | 'radioButton' | 'list' | 'button';
/**
 * Represents a template entity object.
 *
 * @interface
 * @property {AttributeType} type - Attribute type.
 * @property {string} marker - Textual identifier of the attribute (marker).
 * @property {number} position - Position number for sorting.
 * @property {Record<string, any>} validators - Set of validators for validation.
 * @property {Record<string, any>} localizeInfos - The name of the template, taking into account localization.
 * @property {Array<Record<string, any>>} listTitles - Array of values (with extended data) for list and radioButton attributes.
 * @property {Array<Record<string, any>>} settings -  Additional attribute settings (optional).
 *
 */
interface IAttributesSetsEntity {
    type: AttributeType;
    marker: string;
    position: number;
    validators: {
        requiredValidator: {
            strict: boolean;
        };
        defaultValueValidator: {
            fieldDefaultValue: number;
        };
    };
    localizeInfos: Record<string, any>;
    listTitles: Array<IListTitle> | Record<string, any>;
    settings?: Record<string, any>;
}
export { IAttributesSets, IAttributesSetsEntity, IListTitle, AttributeType };
