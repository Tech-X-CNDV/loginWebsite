import { IAttributes } from "../base/utils";
/**
 * Represents an interface object of Forms Api.
 *
 * @property {function} getAllForms - Get all forms in array.
 *
 * @property {function} getFormByMarker - Get one form by form marker.
 */
interface IForms {
    getAllForms(langCode: string, offset?: number, limit?: number): Promise<Array<IFormsEntity>>;
    getFormByMarker(marker: string, langCode: string): Promise<IFormsEntity>;
}
/**
 * Represents an object with various properties.
 *
 * @interface
 * @property {number} id - The identifier of the object.
 * @property {number} attributeSetId - The identifier of the attribute set being used.
 * @property {string} processingType - Type of form processing.
 * @property {Record<string, any>} localizeInfos - The name of the form, taking into account localization.
 * @property {object} processingData - Form data.
 * @property {Array<IAttributes>} attribute - Array of attribute values from the used attribute set for displaying the form (taking into account the specified language)
 * @property {number} version - The version number of the object.
 * @property {string} type - Form type.
 * @property {string} identifier - The textual identifier for the record field.
 * @property {number} position - The position of the object.
 */
interface IFormsEntity {
    attributeSetId: number | null;
    attributes: Array<IAttributes> | Record<string, any>;
    id: number;
    identifier: string;
    localizeInfos: Record<string, any>;
    templateId: number | null;
    position: number;
    type: string | null;
    processingType: string;
    version: number;
}
export { IForms, IFormsEntity };
