import AsyncModules from '../base/asyncModules';
import { IProductStatusEntity, IProductStatuses } from "./productStatusesInterfaces";
import StateModule from "../base/stateModule";
/**
 * Controllers for working with product statuses
 */
export default class ProductStatusesApi extends AsyncModules implements IProductStatuses {
    protected state: StateModule;
    protected _url: string;
    constructor(state: StateModule);
    /**
     * Search for all product status objects.
     * @param {string} [langCode] - Optional parameter language code
     *
     * @returns Returns an array of product status objects
     */
    getProductStatuses(langCode?: string): Promise<Array<IProductStatusEntity>>;
    /**
     * Search for a product status object by identifier.
     *
     * @param {number} id - Status id
     * @param {string} [langCode] - Optional parameter language code
     *
     * @returns Returns a product status object
     */
    getProductStatusesById(id: number, langCode?: string): Promise<IProductStatusEntity>;
    /**
     * Search for a product status object by its textual identifier (marker).
     *
     * @param {string} marker - Product marker
     * @param {string} [langCode] - Optional parameter language code
     *
     * @returns Returns a product status object
     */
    getProductsByStatusMarker(marker: string, langCode?: string): Promise<IProductStatusEntity>;
    /**
     * Check the existence of a textual identifier.
     *
     * @param {string} marker - Product marker
     *
     * @returns Returns true if the textual identifier (marker) exists or false if it doesn't
     */
    validateMarker(marker: string): Promise<boolean>;
}
