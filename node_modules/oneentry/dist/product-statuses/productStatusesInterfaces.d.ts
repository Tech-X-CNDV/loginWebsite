/**
 * Represents an interface object of Product Statuses Api.
 *
 * @property {function} getProductStatuses - Search for all product status objects.
 *
 * @property {function} getProductStatusesById - Search for a product status object by identifier.
 *
 * @property {function} getProductsByStatusMarker - Search for a product status object by its textual identifier (marker).
 *
 * @property {function} validateMarker - Check the existence of a textual identifier.
 */
interface IProductStatuses {
    getProductStatuses(langCode: string): Promise<Array<IProductStatusEntity>>;
    getProductStatusesById(id: number, langCode: string): Promise<IProductStatusEntity>;
    getProductsByStatusMarker(marker: string, langCode: string): Promise<IProductStatusEntity>;
    validateMarker(marker: string): Promise<boolean>;
}
/**
 * Represents a position object.
 *
 * @interface
 * @property {number} id - The unique identifier of the position.
 * @property {number} version - The version number of the object.
 * @property {string} identifier - The textual identifier for the record field.
 * @property {number} position - Position number.
 * @property {Record<string, any>} localizeInfos - The name of the products statuses, taking into account localization.
 */
interface IProductStatusEntity {
    id: number;
    position: number;
    version: number;
    identifier: string;
    localizeInfos: Record<string, any>;
}
export { IProductStatuses, IProductStatusEntity };
