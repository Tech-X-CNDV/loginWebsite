"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const asyncModules_1 = require("../base/asyncModules");
/**
 * Controllers for working with product statuses
 */
class ProductStatusesApi extends asyncModules_1.default {
    constructor(state) {
        super(state);
        this._url = state.url + '/api/content/product-statuses';
    }
    /**
     * Search for all product status objects.
     * @param {string} [langCode] - Optional parameter language code
     *
     * @returns Returns an array of product status objects
     */
    async getProductStatuses(langCode = this.state.lang) {
        const result = await this._fetchGet('');
        return this._normalizeData(result, langCode);
    }
    /**
     * Search for a product status object by identifier.
     *
     * @param {number} id - Status id
     * @param {string} [langCode] - Optional parameter language code
     *
     * @returns Returns a product status object
     */
    async getProductStatusesById(id, langCode = this.state.lang) {
        const result = await this._fetchGet(`/${id}`);
        return this._normalizeData(result, langCode);
    }
    /**
     * Search for a product status object by its textual identifier (marker).
     *
     * @param {string} marker - Product marker
     * @param {string} [langCode] - Optional parameter language code
     *
     * @returns Returns a product status object
     */
    async getProductsByStatusMarker(marker, langCode = this.state.lang) {
        const result = await this._fetchGet(`/marker/${marker}`);
        return this._normalizeData(result, langCode);
    }
    /**
     * Check the existence of a textual identifier.
     *
     * @param {string} marker - Product marker
     *
     * @returns Returns true if the textual identifier (marker) exists or false if it doesn't
     */
    async validateMarker(marker) {
        const result = await this._fetchGet(`/marker-validation/${marker}`);
        return result;
    }
}
exports.default = ProductStatusesApi;
