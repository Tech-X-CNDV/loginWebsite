"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class SyncModules {
    constructor(state) {
        this.state = state;
        this._url = state.url;
    }
    _getFullPath(path) {
        return (this._url + path);
    }
    _queryParamsToString(query) {
        let result = '';
        for (let key in query) {
            if (query[key] !== null) {
                result += `${key}=${query[key]}&`;
            }
        }
        return result.slice(0, (result.length - 1));
    }
    _normalizeData(data, langCode = this.state.lang) {
        if (Array.isArray(data)) {
            return data.map(item => this._normalizeData(item, langCode));
        }
        else {
            const normalizeData = {};
            for (let key in data) {
                if (Array.isArray(data[key]) || !data[key] || typeof data[key] !== 'object') {
                    normalizeData[key] = data[key];
                }
                else if (langCode in data[key]) {
                    normalizeData[key] = data[key][langCode];
                }
                else {
                    normalizeData[key] = this._normalizeData(data[key], langCode);
                }
            }
            return normalizeData;
        }
    }
    _normalizePostBody(body, langCode = this.state.lang) {
        const formData = {};
        formData[langCode] = Array.isArray(body.formData) ? body.formData : [body.formData];
        body.formData = formData;
        return body;
    }
    _clearArray(data) {
        if (Array.isArray(data)) {
            return data.map(item => this._clearArray(item));
        }
        else {
            const dataWithoutArray = {};
            for (let key in data) {
                if (Array.isArray(data[key]) && data[key].length === 1) {
                    dataWithoutArray[key] = data[key][0];
                }
                else if (typeof data[key] === 'object' && data[key] && !Array.isArray(data[key])) {
                    dataWithoutArray[key] = this._clearArray(data[key]);
                }
                else {
                    dataWithoutArray[key] = data[key];
                }
            }
            return dataWithoutArray;
        }
    }
    _dataPostProcess(data, langCode = this.state.lang) {
        const normalize = this._normalizeData(data, langCode);
        const result = this._clearArray(normalize);
        return result;
    }
    setAccessToken(accessToken) {
        this.state.accessToken = accessToken;
        return this;
    }
    setRefreshToken(refreshToken) {
        this.state.refreshToken = refreshToken;
        return this;
    }
}
exports.default = SyncModules;
