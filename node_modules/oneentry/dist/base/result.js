"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Result {
    constructor(data) {
        this.body = data;
    }
    async blob() {
        this.body = await this.body.blob();
        return this;
    }
    async json() {
        this.body = await typeof this.body === 'string' ? JSON.parse(this.body) : this.body.json();
        return this;
    }
    makeDataWithoutLang(langCode, data) {
        if (data) {
            if (Array.isArray(data)) {
                return data.map((item) => this.makeDataWithoutLang(langCode, item));
            }
            else {
                for (let key in data) {
                    if (typeof data[key] === 'object' && data[key] && langCode in data[key]) {
                        data[key] = data[key][langCode];
                    }
                    else if (typeof data[key] === 'object' && data[key] != null) {
                        data[key] = this.makeDataWithoutLang(langCode, data[key]);
                    }
                    else if (Array.isArray(data[key])) {
                        data[key] = data.map((item) => this.makeDataWithoutLang(langCode, item));
                    }
                }
                return data;
            }
        }
        else {
            if (Array.isArray(this.body)) {
                this.body = this.body.map((item) => this.makeDataWithoutLang(langCode, item));
            }
            else {
                for (let key in this.body) {
                    if (typeof this.body[key] === 'object' && this.body[key] && langCode in this.body[key]) {
                        this.body[key] = this.body[key][langCode];
                    }
                    else if (typeof this.body[key] === 'object' && this.body[key] != null) {
                        this.body[key] = this.makeDataWithoutLang(langCode, this.body[key]);
                    }
                    else if (Array.isArray(this.body[key])) {
                        this.body[key] = this.body[key].map((item) => this.makeDataWithoutLang(langCode, item));
                    }
                }
            }
            return this;
        }
    }
    makeDataWithoutArray(data) {
        if (data) {
            if (Array.isArray(data)) {
                return data.map(item => this.makeDataWithoutArray(item));
            }
            else {
                for (let key in data) {
                    if (Array.isArray(data[key]) && data[key].length === 1) {
                        data[key] = data[key][0];
                    }
                    else if (typeof data[key] === 'object' && data[key] && !Array.isArray(data[key])) {
                        data[key] = this.makeDataWithoutArray(data[key]);
                    }
                }
                return data;
            }
        }
        else {
            if (Array.isArray(this.body)) {
                return this.body.map(item => this.makeDataWithoutArray(item));
            }
            else {
                for (let key in this.body) {
                    if (Array.isArray(this.body[key]) && this.body[key].length === 1) {
                        this.body[key] = this.body[key][0];
                    }
                    else if (typeof this.body[key] === 'object' && this.body[key] && !Array.isArray(this.body[key])) {
                        this.body[key] = this.makeDataWithoutArray(this.body[key]);
                    }
                }
                return this;
            }
        }
    }
}
exports.default = Result;
