import { IAuthFormData } from "../auth-provider/authProvidersInterfaces";
import { FormDataType } from "../formsData/formsDataInterfaces";
/**
 * Represents a interface object of Users Api.
 *
 * @property {function} subscribeByMarker - Getting the data of an authorized user.
 * @property {function} unsubscribeByMarker - Updating a single user object.
 * @property {function} addFCMToken - Adds FCM token for sending Push notification.
 * @property {function} deleteFCMToken - Delete FCM token.
 * @property {function} setAccessToken - Only for custom authorization. An intermediate method for setting up an access token.
 */
interface IUsers {
    getUser(langCode?: string): Promise<IUserEntity>;
    updateUser(data: IUserBody, langCode?: string): Promise<boolean>;
    addFCMToken(token: string): Promise<boolean>;
    deleteFCMToken(token: string): Promise<boolean>;
}
interface IUserEntity {
    id: number;
    identifier: string;
    formData: Array<FormDataType>;
    formIdentifier: string;
    authProviderIdentifier: string;
    groups: Array<string>;
}
interface IUserBody {
    formIdentifier: string;
    langCode?: string;
    authData: Array<{
        marker: string;
        value: string;
    }>;
    formData: IAuthFormData | Array<IAuthFormData>;
    notificationData: {
        email: string;
        phonePush: Array<string>;
        phoneSMS: string;
    };
}
export { IUsers, IUserEntity, IUserBody, };
