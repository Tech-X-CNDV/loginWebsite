"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const asyncModules_1 = require("../base/asyncModules");
/**
 * Controllers for working with users
 */
class UsersApi extends asyncModules_1.default {
    constructor(state) {
        super(state);
        this._url = state.url + '/api/content/users';
    }
    /**
     * Getting the data of an authorized user.
     *
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     *
     * @param {string} [langCode] Required parameter lang code.
     */
    async getUser(langCode = this.state.lang) {
        const result = await this._fetchGet(`/me?langCode=${langCode}`);
        return this._normalizeData(result);
    }
    /**
     * Updating a single user object.
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     *
     * @param {object} data - Request body.
     * @param {string} langCode - Optional language field
     *
     * @example
     * {
     *   "formIdentifier": "reg",
     *   "authData": [
     *     {
     *       "marker": "password",
     *       "value": "12345"
     *     }
     *   ],
     *   "formData": {
     *         "marker": "last_name",
     *         "type": "string",
     *         "value": "Username"
     *   },
     *   "notificationData": {
     *     "email": "example@oneentry.cloud",
     *     "phonePush": "",
     *     "phoneSMS": "+99999999999"
     *   }
     * }
     */
    async updateUser(data, langCode = this.state.lang) {
        if (!('langCode' in data))
            data['langCode'] = langCode;
        const result = await this._fetchPut('/me', this._normalizePostBody(data, langCode));
        return result;
    }
    /**
     * Adds FCM token for sending Push notification.
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     *
     * @param {string} token - Cloud messaging token.
     */
    async addFCMToken(token) {
        const result = await this._fetchPost(`/me/fcm-token/${token}`);
        return result;
    }
    /**
     * Delete FCM token.
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     *
     * @param {string} token - Cloud messaging token.
     */
    async deleteFCMToken(token) {
        const result = await this._fetchDelete(`/me/fcm-token/${token}`);
        return result;
    }
}
exports.default = UsersApi;
