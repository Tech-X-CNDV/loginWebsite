import AsyncModules from '../base/asyncModules';
import { IUploadingQuery, IUploadingReturns, IFileUploading } from "./fileUploadingInterfaces";
import StateModule from "../base/stateModule";
/**
 * Controllers for working with file uploading
 */
export default class FileUploadingApi extends AsyncModules implements IFileUploading {
    protected state: StateModule;
    protected _url: string;
    constructor(state: StateModule);
    private _defaultQuery;
    /**
     * Upload file function.
     *
     * @param {File} [data] File objects. Get data as File from your unput as e.target.files[0]
     *
     * @param {IUploadingQuery} [fileQuery] - Optional set query parameters.
     * @param {string} fileQuery.type - Type, determines the folder name in the storage. Example : "page"
     * @param {string} fileQuery.entity - Entity name from which the file is uploaded, determines the folder name in the storage. Example : "editor"
     * @param {number} fileQuery.id - Identifier of the object from which the file is uploaded, determines the folder name in the storage. Example : 3787
     * @param {number} [fileQuery.width] - Optional width parameter. Example : 0
     * @param {number} [fileQuery.height] - Optional height parameter. Example : 0
     * @param {boolean} [fileQuery.compress] - Optional flag of optimization (compression) for images. Example : true
     *
     * @returns Uploads a file to an Amazon S3-compatible cloud file storage
     */
    upload(data: File | Blob, fileQuery?: IUploadingQuery): Promise<IUploadingReturns>;
    /**
     * Deletes a file from the cloud file storage.
     *
     * @param {string} [filename] File name. Example "file.png"
     *
     * @param {IUploadingQuery} [fileQuery] - Optional set query parameters.
     * @param {string} [fileQuery.type] - Type, determines the folder name in the storage. Example : "page"
     * @param {string} [fileQuery.entity] - Entity name from which the file is uploaded, determines the folder name in the storage. Example : "editor"
     * @param {number} [fileQuery.id] - Identifier of the object from which the file is uploaded, determines the folder name in the storage. Example : 3787
     *
     * @returns Deletes a file from the cloud file storage
     */
    delete(filename: string, fileQuery?: IUploadingQuery): Promise<any>;
    /**
     * Get file by parameters.
     *
     * @param {number} [id] Object identifier, from which the file is uploaded, determines the folder name in the storage
     *
     * @param {string} [type] - Type, determines the folder name in the storage
     * @param {string} [entity] - entity name, from which the file is uploaded, determines the folder name in the storage
     * @param {string} [filename] - Filename. Example "file.png"
     *
     * @returns Return file as File object
     */
    getFile(id: number, type: string, entity: string, filename?: string): Promise<Blob>;
}
