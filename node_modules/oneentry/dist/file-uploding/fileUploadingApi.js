"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const asyncModules_1 = require("../base/asyncModules");
/**
 * Controllers for working with file uploading
 */
class FileUploadingApi extends asyncModules_1.default {
    constructor(state) {
        super(state);
        this._defaultQuery = {
            type: null,
            entity: null,
            id: null,
            width: null,
            height: null,
            compress: null,
        };
        this._url = state.url + '/api/content/files';
    }
    /**
     * Upload file function.
     *
     * @param {File} [data] File objects. Get data as File from your unput as e.target.files[0]
     *
     * @param {IUploadingQuery} [fileQuery] - Optional set query parameters.
     * @param {string} fileQuery.type - Type, determines the folder name in the storage. Example : "page"
     * @param {string} fileQuery.entity - Entity name from which the file is uploaded, determines the folder name in the storage. Example : "editor"
     * @param {number} fileQuery.id - Identifier of the object from which the file is uploaded, determines the folder name in the storage. Example : 3787
     * @param {number} [fileQuery.width] - Optional width parameter. Example : 0
     * @param {number} [fileQuery.height] - Optional height parameter. Example : 0
     * @param {boolean} [fileQuery.compress] - Optional flag of optimization (compression) for images. Example : true
     *
     * @returns Uploads a file to an Amazon S3-compatible cloud file storage
     */
    async upload(data, fileQuery) {
        const query = { ...this._defaultQuery, ...fileQuery };
        const body = new FormData();
        body.append('files', data);
        const result = await this._fetchPost('?' + this._queryParamsToString(query), body);
        return result;
    }
    /**
     * Deletes a file from the cloud file storage.
     *
     * @param {string} [filename] File name. Example "file.png"
     *
     * @param {IUploadingQuery} [fileQuery] - Optional set query parameters.
     * @param {string} [fileQuery.type] - Type, determines the folder name in the storage. Example : "page"
     * @param {string} [fileQuery.entity] - Entity name from which the file is uploaded, determines the folder name in the storage. Example : "editor"
     * @param {number} [fileQuery.id] - Identifier of the object from which the file is uploaded, determines the folder name in the storage. Example : 3787
     *
     * @returns Deletes a file from the cloud file storage
     */
    async delete(filename, fileQuery) {
        const query = { ...this._defaultQuery, ...fileQuery };
        const result = await this._fetchDelete(`?filename=${filename}&` + this._queryParamsToString(query));
        return result.json();
    }
    /**
     * Get file by parameters.
     *
     * @param {number} [id] Object identifier, from which the file is uploaded, determines the folder name in the storage
     *
     * @param {string} [type] - Type, determines the folder name in the storage
     * @param {string} [entity] - entity name, from which the file is uploaded, determines the folder name in the storage
     * @param {string} [filename] - Filename. Example "file.png"
     *
     * @returns Return file as File object
     */
    async getFile(id, type, entity, filename) {
        const options = {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'x-app-token': this.state.token,
            }
        };
        const response = await fetch(this._getFullPath(`?id=${id}&type=${type}&entity=${entity}${filename ? `&filename=${filename}` : ''}`), options);
        return response.blob();
    }
}
exports.default = FileUploadingApi;
