/**
 * Represents a interface object of File Uploading Api.
 *
 * @property {function} upload - Upload file from CMS.
 * @property {function} delete - Delete file from CMS.
 * @property {function} getFile - Get file by parameters.
 */
interface IFileUploading {
    upload(data: File, fileQuery?: IUploadingQuery): Promise<IUploadingReturns>;
    delete(filename: string, fileQuery?: IUploadingQuery): Promise<any>;
    getFile(id: number, type: string, entity: string, filename?: string): Promise<Blob>;
}
interface IFileEntity {
    file: File | string | null;
}
/**
 * @interface
 * @property {string} type - Type, determines the folder name in the storage.
 * @property {string} entity - Entity name from which the file is uploaded, determines the folder name in the storage.
 * @property {number} id - Identifier of the object from which the file is uploaded, determines the folder name in the storage.
 * @property {number} [width] - Width parameter.
 * @property {number} [height] - Height parameter.
 * @property {boolean} [compress] - Flag of optimization (compression) for images.
 */
interface IUploadingQuery {
    type: string | null;
    entity: string | null;
    id: number | null;
    width?: number | null;
    height?: string | null;
    compress?: boolean | null;
    [key: string]: string | number | boolean | null;
}
/**
 * @interface
 * @property {string} filename - Filename with relative path.
 * @property {string} downloadLink - Link for downloading the file.
 * @property {number} size - Size of the file in bytes.
 */
interface IUploadingReturns {
    filename: string;
    downloadLink: string;
    size: number;
}
export { IUploadingQuery, IUploadingReturns, IFileUploading, IFileEntity };
