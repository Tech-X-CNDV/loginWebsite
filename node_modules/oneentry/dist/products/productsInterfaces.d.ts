import { LangType, Types } from "../base/utils";
/**
 * Represents an interface object of Products Api.
 *
 * @property {function} getProducts - Search for all product page objects with pagination and filtering.
 *
 * @property {function} getProductsEmptyPage - Search for all product page objects with pagination that do not have a category.
 *
 * @property {function} getProductsByPageId - Search for all products with pagination for the selected category.
 *
 * @property {function} getProductsPriceByPageUrl - Search for information about products and prices for the selected category.
 *
 * @property {function} getProductsByPageUrl - Search for all products with pagination for the selected category.
 *
 * @property {function} getRelatedProductsById - Find all related product page objects.
 *
 * @property {function} getProductById - Retrieve one product object.
 *
 * @property {function} getProductBlockById - Getting a product block object by product id.
 *
 * @property {function} searchProduct - Quick search for product page objects with limited output.
 */
interface IProductApi {
    getProducts(body?: Array<IFilterParams>, langCode?: string, userQuery?: IProductsQuery): Promise<Array<IProductsEntity>>;
    getProductsEmptyPage(langCode?: LangType, userQuery?: IProductsQuery): Promise<Array<IProductsEntity>>;
    getProductsByPageId(id: number, body?: Array<IFilterParams>, langCode?: string, userQuery?: IProductsQuery): Promise<Array<IProductsEntity>>;
    getProductsPriceByPageUrl(url: string, langCode?: string, userQuery?: IProductsQuery): Promise<Array<IProductInfo>>;
    getProductsByPageUrl(url: string, body?: Array<IFilterParams>, langCode?: string, userQuery?: IProductsQuery): Promise<Array<IProductsEntity>>;
    getRelatedProductsById(id: number, langCode?: string, userQuery?: IProductsQuery): Promise<Array<IProductsEntity>>;
    getProductById(id: number, langCode: string): Promise<IProductsEntity>;
    getProductBlockById(id: number): Promise<Array<IProductBlock>>;
    searchProduct(name: string, langCode: string): Promise<Array<IProductsEntity>>;
}
/**
 * Represents a product query parameters object.
 *
 * @interface
 * @property {number} offset - Parameter for pagination, default 0.
 * @property {number} limit - Parameter for pagination, default 30.
 * @property {string | null} statusMarker - Product page status id, default null.
 * @property {string | null} conditionValue - The value that is being searched for, default null.
 * @property {string | null} conditionMarker - Id of the filter condition by which the values are filtered, default null.
 * @property {string | null} attributeMarker - The text identifier of the indexed attribute by which values are filtered, default null.
 * @property {string} sortOrder - Sort order 'DESC' | 'ASC', default 'DESC'.
 * @property {string} langCode - localization language code (used only when searching with a filter, default 'en_US'.
 * @property {string} sortKey - Field for sorting (default - null)
 */
interface IProductsQuery {
    offset?: number;
    limit?: number;
    statusMarker?: string | null;
    conditionValue?: string | null;
    /**
     * 'in' - Contains,
     * 'nin' - Does not contain,
     * 'eq' - Equal,
     * 'neq' - Not equal,
     * 'mth' - Greater than,
     * 'lth' - Less than,
     * 'exs' - Exists,
     * 'nexs' - Does not exist
     */
    conditionMarker?: 'in' | 'nin' | 'eq' | 'neq' | 'mth' | 'lth' | 'exs' | 'nexs' | null;
    attributeMarker?: string | null;
    sortOrder?: 'DESC' | 'ASC' | null;
    sortKey?: "id" | "position" | "title" | "date" | "price" | null;
    [key: string]: string | number | null;
}
/**
 * Represents a product POST data object.
 *
 * @interface
 * @property {number | null} conditionValue - The value that is being searched for, default null.
 * @property {string | null} conditionMarker - Id of the filter condition by which the values are filtered, default null.
 * @property {string | null} attributeMarker - The text identifier of the indexed attribute by which values are filtered, default null.
 * @property {Array<string> | null} pageUrl - Url of the category page object.
 */
interface IFilterParams {
    attributeMarker: string;
    /**
     * 'in' - Contains,
     * 'nin' - Does not contain,
     * 'eq' - Equal,
     * 'neq' - Not equal,
     * 'mth' - Greater than,
     * 'lth' - Less than,
     * 'exs' - Exists,
     * 'nexs' - Does not exist
     */
    conditionMarker?: 'in' | 'nin' | 'eq' | 'neq' | 'mth' | 'lth' | 'exs' | 'nexs' | null;
    conditionValue: number | string | null;
    pageUrl?: Array<string> | null;
}
/**
 * Represents a product entity object.
 *
 * @interface
 * @property {number} id - The unique identifier.
 * @property {object} additional - Additional value from the index.
 * @property {Record<string, any>} localizeInfos - The name of the products, taking into account localization.
 * @property {boolean} isVisible - A sign of page visibility.
 * @property {number | null} statusIdentifier - Product page status identifiers (may be null).
 * @property {Array<number>} relatedIds - Ids of related product pages.
 * @property {string} attributeSetIdentifier - Set of attributes id.
 * @property {boolean} isSync - Indication of page indexing.
 * @property {number} price - The value of the product page price taken from the index.
 * @property {string} templateIdentifier - User id of the linked template.
 * @property {string} shortDescTemplateIdentifier - User id of the linked template for a short description.
 * @property {Record<string, any>} statusLocalizeInfos - JSON description of the item status object, taking into account the language.
 * @property {number} position - Item number (for sorting).
 */
interface IProductsEntity {
    id: number;
    additional: {
        prices: {
            min: number;
            max: number;
        };
    };
    localizeInfos: Record<string, any>;
    blocks?: string | Array<string>;
    isVisible: boolean;
    statusIdentifier: number | null;
    attributeSetIdentifier: string;
    isSync: number | boolean;
    price: number;
    templateIdentifier: string | null;
    shortDescTemplateIdentifier: string;
    statusLocalizeInfos: Record<string, any>;
    attributeValues: Record<string, any>;
    position: number;
    sku: string | null;
    productPages?: Array<Record<string, any>> | Record<string, any>;
}
interface IProductInfo {
    id: number;
    price: number;
}
interface IProductBlock {
    id: number;
    attributeSetIdentifier: number | null;
    localizeInfos: Record<string, any>;
    version: number;
    position: number;
    identifier: string;
    type: Types;
    customSettings: {
        sliderDelay: number;
        sliderDelayType: string;
        productConfig: {
            quantity: number;
            sortType: string;
            sortOrder: string;
            countElementsPerRow: number;
        };
        similarProductRules: Array<{
            property: string;
            includes: string;
            keywords: string;
            strict: string;
        }>;
        condition: Record<string, any>;
    };
    templateIdentifier: string | null;
    isVisible: boolean;
    isSync: boolean;
    attributeValues: Record<string, any>;
}
export { IFilterParams, IProductsQuery, IProductApi, IProductsEntity, IProductInfo, IProductBlock };
