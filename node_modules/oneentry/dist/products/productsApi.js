"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const asyncModules_1 = require("../base/asyncModules");
/**
 * Controllers for working with product pages
 */
class ProductApi extends asyncModules_1.default {
    constructor(state) {
        super(state);
        this._defaultQuery = {
            offset: 0,
            limit: 30,
            templateMarker: null,
            statusMarker: null,
            conditionValue: null,
            conditionMarker: null,
            attributeMarker: null,
            sortOrder: null,
            sortKey: null
        };
        this._url = state.url + '/api/content/products';
    }
    /**
     * Search for all products with pagination and filter.
     * @param {Array<IFilterParams>} body - Request body. Default [].
     * @param {string} [langCode] - Language code parameter. Default "en_US"
     * @param {IProductsQuery} [userQuery] - Optional set query parameters.
     * @param {number} [userQuery.limit] - Optional parameter for pagination, default is 0
     *
     * @param {number} [userQuery.offset] - Optional parameter for pagination, default is 30
     *
     * @param {string} [userQuery.statusMarker] - Optional identifier of the product page status
     *
     * @param {string} [userQuery.conditionValue] - Optional value that is being searched
     *
     * @param {string} [userQuery.conditionMarker] - Optional identifier of the filter condition by which values are filtered
     *
     * @param {string} [userQuery.attributeMarker] - Optional text identifier of the indexed attribute by which values are filtered
     *
     * @param {string} [userQuery.sortOrder] - Optional sorting order DESC | ASC
     *
     * @param {string} [userQuery.sortKey] - Optional field to sort by
     *
     * @example
     * const body = [
     *   {
     *     "attributeMarker": "price",
     *     "conditionMarker": "mth",
     *     "statusMarker": "waiting",
     *     "conditionValue": 1,
     *     "pageUrls": [
     *       "23-laminat-floorwood-maxima"
     *     ]
     *   },
     *   {
     *     "attributeMarker": "price",
     *     "conditionMarker": "lth",
     *     "conditionValue": 3,
     *     "pageUrls": [
     *       "23-laminat-floorwood-maxima"
     *     ]
     *   }
     * ]
     *
     * @returns  Array with ProductEntity objects
     */
    async getProducts(body = [], langCode = this.state.lang, userQuery) {
        const query = { ...this._defaultQuery, ...userQuery, langCode };
        const result = await this._fetchPost(`/all?` + this._queryParamsToString(query), body);
        return this._dataPostProcess(result.items, langCode);
    }
    /**
     * Search for all product page objects with pagination that do not have a category.
     *
     * @param {string} [langCode] - Language code parameter. Default "en_US"
     * @param {IProductsQuery} [userQuery] - Optional set query parameters.
     * @param {number} [userQuery.limit] - Optional parameter for pagination, default is 0
     *
     * @param {number} [userQuery.offset] - Optional parameter for pagination, default is 30
     *
     * @param {string} [userQuery.statusMarker] - Optional identifier of the product page status
     *
     * @param {string} [userQuery.conditionValue] - Optional value that is being searched
     *
     * @param {string} [userQuery.conditionMarker] - Optional identifier of the filter condition by which values are filtered
     *
     * @param {string} [userQuery.attributeMarker] - Optional text identifier of the indexed attribute by which values are filtered
     *
     * @param {string} [userQuery.sortOrder] - Optional sorting order DESC | ASC
     *
     * @param {string} [userQuery.sortKey] - Optional field to sort by
     *
     * @returns  Array with ProductEntity objects
     */
    async getProductsEmptyPage(langCode = this.state.lang, userQuery) {
        const query = { ...this._defaultQuery, ...userQuery };
        const result = await this._fetchGet(`/empty-page?langCode=${langCode}&` + this._queryParamsToString(query));
        return this._dataPostProcess(result.items, langCode);
    }
    /**
     * Search for all products with pagination for the selected category.
     * @param {Array<IFilterParams>} body - Request body.
     * @param {number} id - Page id.
     * @param {string} [langCode] - Language code parameter. Default "en_US"
     * @param {IProductsQuery} [userQuery] - Optional set query parameters.
     * @param {number} [userQuery.limit] - Optional parameter for pagination, default is 0
     *
     * @param {number} [userQuery.offset] - Optional parameter for pagination, default is 30
     *
     * @param {string} [userQuery.statusMarker] - Optional identifier of the product page status
     *
     * @param {string} [userQuery.conditionValue] - Optional value that is being searched
     *
     * @param {string} [userQuery.conditionMarker] - Optional identifier of the filter condition by which values are filtered
     *
     * @param {string} [userQuery.attributeMarker] - Optional text identifier of the indexed attribute by which values are filtered
     *
     * @param {string} [userQuery.sortOrder] - Optional sorting order DESC | ASC
     *
     * @param {string} [userQuery.sortKey] - Optional field to sort by
     *
     * @example
     * const body = [
     *   {
     *     "attributeMarker": "price",
     *     "conditionMarker": "mth",
     *     "statusMarker": "waiting",
     *     "conditionValue": 1,
     *     "pageUrls": [
     *       "23-laminat-floorwood-maxima"
     *     ]
     *   },
     *   {
     *     "attributeMarker": "price",
     *     "conditionMarker": "lth",
     *     "conditionValue": 3,
     *     "pageUrls": [
     *       "23-laminat-floorwood-maxima"
     *     ]
     *   }
     * ]
     *
     * @returns  Array with ProductEntity objects
     */
    async getProductsByPageId(id, body = [], langCode = this.state.lang, userQuery) {
        const query = { ...this._defaultQuery, ...userQuery };
        const result = await this._fetchPost(`/page/${id}?langCode=${langCode}&` + this._queryParamsToString(query), body);
        return this._dataPostProcess(result.items, langCode);
    }
    /**
     * Search for information about products and prices for the selected category.
     * @param {string} url - Page url.
     * @param {string} langCode - Language code.
     * @param {IProductsQuery} [userQuery] - Optional set query parameters.
     * @param {number} [userQuery.limit] - Optional parameter for pagination, default is 0
     *
     * @param {number} [userQuery.offset] - Optional parameter for pagination, default is 30
     *
     * @param {string} [userQuery.statusMarker] - Optional identifier of the product page status
     *
     * @param {string} [userQuery.conditionValue] - Optional value that is being searched
     *
     * @param {string} [userQuery.conditionMarker] - Optional identifier of the filter condition by which values are filtered
     *
     * @param {string} [userQuery.attributeMarker] - Optional text identifier of the indexed attribute by which values are filtered
     *
     * @param {string} [userQuery.sortOrder] - Optional sorting order DESC | ASC
     *
     * @param {string} [userQuery.sortKey] - Optional field to sort by
     *
     * @returns  Array with ProductInformation objects
     */
    async getProductsPriceByPageUrl(url, langCode = this.state.lang, userQuery) {
        const query = { ...this._defaultQuery, ...userQuery, langCode };
        const result = await this._fetchGet(`/page/${url}/prices?` + this._queryParamsToString(query));
        return result.items;
    }
    /**
     * Search for all products with pagination for the selected category.
     * @param {Array<IFilterParams>} body - Request body.
     * @param {string} url - Page url.
     * @param {string} [langCode] - Language code parameter. Default "en_US"
     * @param {IProductsQuery} [userQuery] - Optional set query parameters.
     * @param {number} [userQuery.limit] - Optional parameter for pagination, default is 0
     *
     * @param {number} [userQuery.offset] - Optional parameter for pagination, default is 30
     *
     * @param {string} [userQuery.statusMarker] - Optional identifier of the product page status
     *
     * @param {string} [userQuery.conditionValue] - Optional value that is being searched
     *
     * @param {string} [userQuery.conditionMarker] - Optional identifier of the filter condition by which values are filtered
     *
     * @param {string} [userQuery.attributeMarker] - Optional text identifier of the indexed attribute by which values are filtered
     *
     * @param {string} [userQuery.sortOrder] - Optional sorting order DESC | ASC
     *
     * @param {string} [userQuery.sortKey] - Optional field to sort by
     *
     * @example
     * const body = [
     *   {
     *     "attributeMarker": "price",
     *     "conditionMarker": "mth",
     *     "statusMarker": "waiting",
     *     "conditionValue": 1,
     *     "pageUrls": [
     *       "23-laminat-floorwood-maxima"
     *     ]
     *   },
     *   {
     *     "attributeMarker": "price",
     *     "conditionMarker": "lth",
     *     "conditionValue": 3,
     *     "pageUrls": [
     *       "23-laminat-floorwood-maxima"
     *     ]
     *   }
     * ]
     *
     * @returns  Array with ProductEntity objects
     */
    async getProductsByPageUrl(url, body = [], langCode = this.state.lang, userQuery) {
        const query = { ...this._defaultQuery, ...userQuery };
        const result = await this._fetchPost(`/page/url/${url}?langCode=${langCode}&` + this._queryParamsToString(query), body);
        return this._dataPostProcess(result.items, langCode);
    }
    /**
     * Find all related product page objects.
     *
     * @param {number} [id] - Product page identifier for which to find relationship.
     *
     * @param {string} [langCode] - Language code parameter. Default "en_US"
     *
     * @param {IProductsQuery} [userQuery] - Optional set query parameters.
     * @param {number} [userQuery.limit] - Optional parameter for pagination, default is 0
     *
     * @param {number} [userQuery.offset] - Optional parameter for pagination, default is 30
     *
     * @param {string} [userQuery.sortOrder] - Optional sorting order DESC | ASC
     *
     * @param {string} [userQuery.sortKey] - Optional field to sort by
     *
     * @returns  Array with ProductEntity objects
     */
    async getRelatedProductsById(id, langCode = this.state.lang, userQuery) {
        const query = { ...this._defaultQuery, ...userQuery };
        const result = await this._fetchGet(`/${id}/related?langCode=${langCode}&` + this._queryParamsToString(query));
        return this._dataPostProcess(result.items, langCode);
    }
    /**
     * Retrieve one product object.
     *
     * @param {number} [id] - Product id.
     *
     * @param {string} [langCode] Language code parameter. Default "en_US".
     *
     * @returns  ProductEntity object.
     */
    async getProductById(id, langCode = this.state.lang) {
        const result = await this._fetchGet(`/${id}?langCode=${langCode}`);
        return this._dataPostProcess(result, langCode);
    }
    /**
     * Getting a product block object by product id.
     * @param {number} id - Product id
     *
     */
    async getProductBlockById(id) {
        const response = await this._fetchGet(`/${id}/blocks`);
        return this._normalizeData(response);
    }
    /**
     * Quick search for product page objects with limited output.
     *
     * @param {string} [name] - Text to search product page objects (search is based on the title field of the localizeInfos object with language consideration)
     *
     * @param {string} [langCode] - Language code
     *
     * @returns  Array with ProductEntity objects
     */
    async searchProduct(name, langCode = this.state.lang) {
        const searchProducts = await this._fetchGet(`/quick/search?langCode=${langCode}&name=${name}`);
        if (this.state.multipleResponse) {
            const productsList = [];
            await Promise.all(searchProducts.map(async (product) => {
                await this.getProductById(product.id, langCode).then((result) => {
                    productsList.push(result);
                });
            }));
            return this._dataPostProcess(productsList, langCode);
        }
        return searchProducts;
    }
}
exports.default = ProductApi;
