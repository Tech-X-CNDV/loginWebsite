import { IProductsQuery, IFilterParams, IProductApi, IProductsEntity, IProductInfo, IProductBlock } from './productsInterfaces';
import AsyncModules from '../base/asyncModules';
import StateModule from "../base/stateModule";
/**
 * Controllers for working with product pages
 */
export default class ProductApi extends AsyncModules implements IProductApi {
    protected state: StateModule;
    protected _url: string;
    constructor(state: StateModule);
    private _defaultQuery;
    /**
     * Search for all products with pagination and filter.
     * @param {Array<IFilterParams>} body - Request body. Default [].
     * @param {string} [langCode] - Language code parameter. Default "en_US"
     * @param {IProductsQuery} [userQuery] - Optional set query parameters.
     * @param {number} [userQuery.limit] - Optional parameter for pagination, default is 0
     *
     * @param {number} [userQuery.offset] - Optional parameter for pagination, default is 30
     *
     * @param {string} [userQuery.statusMarker] - Optional identifier of the product page status
     *
     * @param {string} [userQuery.conditionValue] - Optional value that is being searched
     *
     * @param {string} [userQuery.conditionMarker] - Optional identifier of the filter condition by which values are filtered
     *
     * @param {string} [userQuery.attributeMarker] - Optional text identifier of the indexed attribute by which values are filtered
     *
     * @param {string} [userQuery.sortOrder] - Optional sorting order DESC | ASC
     *
     * @param {string} [userQuery.sortKey] - Optional field to sort by
     *
     * @example
     * const body = [
     *   {
     *     "attributeMarker": "price",
     *     "conditionMarker": "mth",
     *     "statusMarker": "waiting",
     *     "conditionValue": 1,
     *     "pageUrls": [
     *       "23-laminat-floorwood-maxima"
     *     ]
     *   },
     *   {
     *     "attributeMarker": "price",
     *     "conditionMarker": "lth",
     *     "conditionValue": 3,
     *     "pageUrls": [
     *       "23-laminat-floorwood-maxima"
     *     ]
     *   }
     * ]
     *
     * @returns  Array with ProductEntity objects
     */
    getProducts(body?: Array<IFilterParams>, langCode?: string, userQuery?: IProductsQuery): Promise<Array<IProductsEntity>>;
    /**
     * Search for all product page objects with pagination that do not have a category.
     *
     * @param {string} [langCode] - Language code parameter. Default "en_US"
     * @param {IProductsQuery} [userQuery] - Optional set query parameters.
     * @param {number} [userQuery.limit] - Optional parameter for pagination, default is 0
     *
     * @param {number} [userQuery.offset] - Optional parameter for pagination, default is 30
     *
     * @param {string} [userQuery.statusMarker] - Optional identifier of the product page status
     *
     * @param {string} [userQuery.conditionValue] - Optional value that is being searched
     *
     * @param {string} [userQuery.conditionMarker] - Optional identifier of the filter condition by which values are filtered
     *
     * @param {string} [userQuery.attributeMarker] - Optional text identifier of the indexed attribute by which values are filtered
     *
     * @param {string} [userQuery.sortOrder] - Optional sorting order DESC | ASC
     *
     * @param {string} [userQuery.sortKey] - Optional field to sort by
     *
     * @returns  Array with ProductEntity objects
     */
    getProductsEmptyPage(langCode?: string, userQuery?: IProductsQuery): Promise<Array<IProductsEntity>>;
    /**
     * Search for all products with pagination for the selected category.
     * @param {Array<IFilterParams>} body - Request body.
     * @param {number} id - Page id.
     * @param {string} [langCode] - Language code parameter. Default "en_US"
     * @param {IProductsQuery} [userQuery] - Optional set query parameters.
     * @param {number} [userQuery.limit] - Optional parameter for pagination, default is 0
     *
     * @param {number} [userQuery.offset] - Optional parameter for pagination, default is 30
     *
     * @param {string} [userQuery.statusMarker] - Optional identifier of the product page status
     *
     * @param {string} [userQuery.conditionValue] - Optional value that is being searched
     *
     * @param {string} [userQuery.conditionMarker] - Optional identifier of the filter condition by which values are filtered
     *
     * @param {string} [userQuery.attributeMarker] - Optional text identifier of the indexed attribute by which values are filtered
     *
     * @param {string} [userQuery.sortOrder] - Optional sorting order DESC | ASC
     *
     * @param {string} [userQuery.sortKey] - Optional field to sort by
     *
     * @example
     * const body = [
     *   {
     *     "attributeMarker": "price",
     *     "conditionMarker": "mth",
     *     "statusMarker": "waiting",
     *     "conditionValue": 1,
     *     "pageUrls": [
     *       "23-laminat-floorwood-maxima"
     *     ]
     *   },
     *   {
     *     "attributeMarker": "price",
     *     "conditionMarker": "lth",
     *     "conditionValue": 3,
     *     "pageUrls": [
     *       "23-laminat-floorwood-maxima"
     *     ]
     *   }
     * ]
     *
     * @returns  Array with ProductEntity objects
     */
    getProductsByPageId(id: number, body?: Array<IFilterParams>, langCode?: string, userQuery?: IProductsQuery): Promise<Array<IProductsEntity>>;
    /**
     * Search for information about products and prices for the selected category.
     * @param {string} url - Page url.
     * @param {string} langCode - Language code.
     * @param {IProductsQuery} [userQuery] - Optional set query parameters.
     * @param {number} [userQuery.limit] - Optional parameter for pagination, default is 0
     *
     * @param {number} [userQuery.offset] - Optional parameter for pagination, default is 30
     *
     * @param {string} [userQuery.statusMarker] - Optional identifier of the product page status
     *
     * @param {string} [userQuery.conditionValue] - Optional value that is being searched
     *
     * @param {string} [userQuery.conditionMarker] - Optional identifier of the filter condition by which values are filtered
     *
     * @param {string} [userQuery.attributeMarker] - Optional text identifier of the indexed attribute by which values are filtered
     *
     * @param {string} [userQuery.sortOrder] - Optional sorting order DESC | ASC
     *
     * @param {string} [userQuery.sortKey] - Optional field to sort by
     *
     * @returns  Array with ProductInformation objects
     */
    getProductsPriceByPageUrl(url: string, langCode?: string, userQuery?: IProductsQuery): Promise<Array<IProductInfo>>;
    /**
     * Search for all products with pagination for the selected category.
     * @param {Array<IFilterParams>} body - Request body.
     * @param {string} url - Page url.
     * @param {string} [langCode] - Language code parameter. Default "en_US"
     * @param {IProductsQuery} [userQuery] - Optional set query parameters.
     * @param {number} [userQuery.limit] - Optional parameter for pagination, default is 0
     *
     * @param {number} [userQuery.offset] - Optional parameter for pagination, default is 30
     *
     * @param {string} [userQuery.statusMarker] - Optional identifier of the product page status
     *
     * @param {string} [userQuery.conditionValue] - Optional value that is being searched
     *
     * @param {string} [userQuery.conditionMarker] - Optional identifier of the filter condition by which values are filtered
     *
     * @param {string} [userQuery.attributeMarker] - Optional text identifier of the indexed attribute by which values are filtered
     *
     * @param {string} [userQuery.sortOrder] - Optional sorting order DESC | ASC
     *
     * @param {string} [userQuery.sortKey] - Optional field to sort by
     *
     * @example
     * const body = [
     *   {
     *     "attributeMarker": "price",
     *     "conditionMarker": "mth",
     *     "statusMarker": "waiting",
     *     "conditionValue": 1,
     *     "pageUrls": [
     *       "23-laminat-floorwood-maxima"
     *     ]
     *   },
     *   {
     *     "attributeMarker": "price",
     *     "conditionMarker": "lth",
     *     "conditionValue": 3,
     *     "pageUrls": [
     *       "23-laminat-floorwood-maxima"
     *     ]
     *   }
     * ]
     *
     * @returns  Array with ProductEntity objects
     */
    getProductsByPageUrl(url: string, body?: Array<IFilterParams>, langCode?: string, userQuery?: IProductsQuery): Promise<Array<IProductsEntity>>;
    /**
     * Find all related product page objects.
     *
     * @param {number} [id] - Product page identifier for which to find relationship.
     *
     * @param {string} [langCode] - Language code parameter. Default "en_US"
     *
     * @param {IProductsQuery} [userQuery] - Optional set query parameters.
     * @param {number} [userQuery.limit] - Optional parameter for pagination, default is 0
     *
     * @param {number} [userQuery.offset] - Optional parameter for pagination, default is 30
     *
     * @param {string} [userQuery.sortOrder] - Optional sorting order DESC | ASC
     *
     * @param {string} [userQuery.sortKey] - Optional field to sort by
     *
     * @returns  Array with ProductEntity objects
     */
    getRelatedProductsById(id: number, langCode?: string, userQuery?: IProductsQuery): Promise<Array<IProductsEntity>>;
    /**
     * Retrieve one product object.
     *
     * @param {number} [id] - Product id.
     *
     * @param {string} [langCode] Language code parameter. Default "en_US".
     *
     * @returns  ProductEntity object.
     */
    getProductById(id: number, langCode?: string): Promise<IProductsEntity>;
    /**
     * Getting a product block object by product id.
     * @param {number} id - Product id
     *
     */
    getProductBlockById(id: number): Promise<Array<IProductBlock>>;
    /**
     * Quick search for product page objects with limited output.
     *
     * @param {string} [name] - Text to search product page objects (search is based on the title field of the localizeInfos object with language consideration)
     *
     * @param {string} [langCode] - Language code
     *
     * @returns  Array with ProductEntity objects
     */
    searchProduct(name: string, langCode?: string): Promise<Array<IProductsEntity>>;
}
