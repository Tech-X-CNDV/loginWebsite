"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const asyncModules_1 = require("../base/asyncModules");
/**
 * Controllers for working with form data
 */
class FormsDataApi extends asyncModules_1.default {
    constructor(state) {
        super(state);
        this._url = state.url + '/api/content/form-data';
    }
    /**
     * Get all forms data.
     *
     * @param {string} [langCode] - Language code. Default "en_US"
     * @param {number} [offset] - Parameter for pagination. Default 0
     * @param {number} [limit] - Parameter for pagination. Default 30
     *
     * @returns Returns array for all objects of FormData
     */
    async getFormsData(langCode = this.state.lang, offset = 0, limit = 30) {
        const result = await this._fetchGet(`?langCode=${langCode}&offset=${offset}&limit=${limit}`);
        return this._dataPostProcess(result.items, langCode);
    }
    /**
     * Find all product page objects with pagination and multiple filtering.
     *
     * @param {object} data - Request body.
     * @param {string} [langCode] - Optional language field
     *
     * @example
     * const data = {
     *    formIdentifier: 'test',
     *    formData: {
     *        marker: 'test',
     *        value: 'Test',
     *        type: 'string'
     *    },
     * }
     *
     * @returns - Returns created FormData objects.
     */
    async postFormsData(data, langCode = this.state.lang) {
        const formData = {};
        formData[langCode] = Array.isArray(data.formData) ? data.formData : [data.formData];
        data.formData = formData;
        const result = await this._fetchPost(``, data);
        return this._dataPostProcess(result);
    }
    /**
     * Get one object of form data by marker.
     *
     * @param {string} marker - Marker of the form data
     * @param {string} [langCode] - Language code. Default "en_US"
     * @param {number} [offset] - Parameter for pagination. Default 0
     * @param {number} [limit] - Parameter for pagination. Default 30
     *
     * @returns Returns array of object FormDataEntity
     */
    async getFormsDataByMarker(marker, langCode = this.state.lang, offset = 0, limit = 30) {
        const result = await this._fetchGet(`/marker/${marker}?langCode=${langCode}&offset=${offset}&limit=${limit}`);
        return this._dataPostProcess(result.items, langCode);
    }
}
exports.default = FormsDataApi;
