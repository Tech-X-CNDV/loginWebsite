import AsyncModules from '../base/asyncModules';
import { IFormsPost, IFormsData, IFormsDataEntity } from './formsDataInterfaces';
import StateModule from "../base/stateModule";
/**
 * Controllers for working with form data
 */
export default class FormsDataApi extends AsyncModules implements IFormsData {
    protected state: StateModule;
    protected _url: string;
    constructor(state: StateModule);
    /**
     * Get all forms data.
     *
     * @param {string} [langCode] - Language code. Default "en_US"
     * @param {number} [offset] - Parameter for pagination. Default 0
     * @param {number} [limit] - Parameter for pagination. Default 30
     *
     * @returns Returns array for all objects of FormData
     */
    getFormsData(langCode?: string, offset?: number, limit?: number): Promise<Array<IFormsDataEntity>>;
    /**
     * Find all product page objects with pagination and multiple filtering.
     *
     * @param {object} data - Request body.
     * @param {string} [langCode] - Optional language field
     *
     * @example
     * const data = {
     *    formIdentifier: 'test',
     *    formData: {
     *        marker: 'test',
     *        value: 'Test',
     *        type: 'string'
     *    },
     * }
     *
     * @returns - Returns created FormData objects.
     */
    postFormsData(data: IFormsPost, langCode?: string): Promise<IFormsDataEntity>;
    /**
     * Get one object of form data by marker.
     *
     * @param {string} marker - Marker of the form data
     * @param {string} [langCode] - Language code. Default "en_US"
     * @param {number} [offset] - Parameter for pagination. Default 0
     * @param {number} [limit] - Parameter for pagination. Default 30
     *
     * @returns Returns array of object FormDataEntity
     */
    getFormsDataByMarker(marker: string, langCode?: string, offset?: number, limit?: number): Promise<Array<IFormsDataEntity>>;
}
