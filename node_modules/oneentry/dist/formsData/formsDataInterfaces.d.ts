/**
 * Represents a interface object of Forms Api.
 *
 * @property {function} getFormsData - Get all forms data.
 * @property {function} postFormsData - Find all product page objects with pagination and multiple filtering.
 * @property {function} getFormsDataByMarker - Get one object of form data by marker.
 */
interface IFormsData {
    getFormsData(langCode: string, offset?: number, limit?: number): Promise<Array<IFormsDataEntity>>;
    postFormsData(data: IFormsPost, langCode?: string): Promise<IFormsDataEntity>;
    getFormsDataByMarker(marker: string, langCode: string, offset?: number, limit?: number): Promise<Array<IFormsDataEntity>>;
}
/**
 * Represents a form data.
 *
 * @interface
 * @property {number} id - The unique identifier of the form page.
 * @property {string} formIdentifier - The identifier of the page.
 * @property {Date | string} time - The identifier of the form.
 * @property {IFormsPost} formData - The identifier of the position.
 * @property {string} attributeSetIdentifier - Text identifier (marker) of the used attribute set.
 */
interface IFormsDataEntity {
    id: number;
    formIdentifier: string;
    time: Date | string;
    formData: IFormsPost;
    attributeSetIdentifier?: string;
}
/**
 * Contains an array of data form objects with the following values
 */
type FormDataType = IBodyTypeStringNumberFloat | IBodyTypeTimeDate | IBodyTypeText | IBodyTypeTextWithHeader | IBodyTypeImageGroupOfImages | IBodyTypeFile | IBodyTypeRadioButtonList | Record<string, any>;
/**
 * interface to create an object of information about saving data using the form
 *
 * @property {number} id
 * @property {string} formIdentifier - The identifier of the page.
 * @property {Date | string} time - Date and time of form modification
 * @property {Array<FormDataType>} formData - The identifier of the page.
 */
interface IFormsPost {
    id?: number;
    formIdentifier: string;
    time?: Date | string;
    formData: Array<FormDataType>;
}
/**
 * @property {string} marker - marker name
 * @property {'string' | 'number' | 'float'} type - Type value
 * @property {string} value
 */
interface IBodyTypeStringNumberFloat {
    marker: string;
    type: 'string' | 'number' | 'float';
    value: string;
}
/**
 * @property {string} marker - marker name
 * @property {'date' | 'dateTime' | 'time'} type - Type value
 * @property {object} value - Date object. Contains fullDate, formattedValue, formatString
 */
interface IBodyTypeTimeDate {
    marker: string;
    type: 'date' | 'dateTime' | 'time';
    value: {
        fullDate: string;
        formattedValue: string;
        formatString: string;
    };
}
/**
 * @property {string} marker - marker name
 * @property {'text'} type - Type value
 * @property {object} value - Text Object. Contains html as string and params
 */
interface IBodyTypeText {
    marker: string;
    type: 'text';
    value: {
        htmlValue: string;
        plainValue: string;
        params: {
            isEditorDisabled: boolean;
            isImageCompressed: boolean;
        };
    };
}
/**
 * @property {string} marker - marker name
 * @property {'textWithHeader'} type - Type value
 * @property {object} value - Text Object. Contains html as string, header and params
 */
interface IBodyTypeTextWithHeader {
    marker: string;
    type: 'textWithHeader';
    value: {
        header: string;
        htmlValue: string;
        plainValue: string;
        params: {
            isEditorDisabled: boolean;
            isImageCompressed: boolean;
        };
    };
}
/**
 * @property {string} marker - marker name
 * @property {'image' | 'groupOfImage'} type - Type value
 * @property {object} value - Image Object. Contains image information
 */
interface IBodyTypeImageGroupOfImages {
    marker: string;
    type: 'image' | 'groupOfImage';
    value: {
        filename: string;
        downloadLink: string;
        size: number;
        previewLink: string;
        params: {
            isImageCompressed: boolean;
        };
    } | Array<{
        filename: string;
        downloadLink: string;
        size: number;
        previewLink: string;
        params: {
            isImageCompressed: boolean;
        };
    }>;
}
/**
 * @property {string} marker - marker name
 * @property {'file'} type - Type value
 * @property {object} value - File Object. Contains file information
 */
interface IBodyTypeFile {
    marker: string;
    type: 'file';
    value: {
        filename: string;
        downloadLink: string;
        size: number;
    };
}
/**
 * @property {string} marker - marker name
 * @property {'file'} type - Type value
 * @property {array} value - Array of list or radioButton bojects.
 */
interface IBodyTypeRadioButtonList {
    marker: string;
    type: 'list' | 'radioButton';
    value: Array<{
        title: string;
        value: string;
        extended: {
            value: string;
            type: string;
        };
    }>;
}
export { IFormsPost, IFormsData, FormDataType, IFormsDataEntity, IBodyTypeStringNumberFloat, IBodyTypeTimeDate, IBodyTypeText, IBodyTypeTextWithHeader, IBodyTypeImageGroupOfImages, IBodyTypeFile, IBodyTypeRadioButtonList };
