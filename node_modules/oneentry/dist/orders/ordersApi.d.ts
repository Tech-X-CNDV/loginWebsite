import AsyncModules from "../base/asyncModules";
import { IOrdersApi, IOrdersEntity, IBaseOrdersEntity, IOrderData, IOrdersByMarkersEntity } from "./ordersInterfaces";
import StateModule from "../base/stateModule";
/**
 * Controllers for working with orders
 */
export default class OrdersApi extends AsyncModules implements IOrdersApi {
    protected state: StateModule;
    protected _url: string;
    constructor(state: StateModule);
    /**
     * Creation of an order in the order storage.
     *
     * @param {string} marker - Textual identifier of the order storage object
     * @param {IOrderData} data - Object for creating an order
     * @param {String} langCode - Optional language field
     *
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     *
     * @example
     * const body = {
     *   "formIdentifier": "bar-orders-form",
     *   "paymentAccountIdentifier": "usd-payment",
     *   "formData": {
     *       "marker": "name_1",
     *       "value": "Name",
     *       "type": "string"
     *   },
     *   "products": [
     *     {
     *       "productId": 1,
     *       "quantity": 2,
     *     }
     *   ],
     * }
     *
     * @returns Returns object for creating an order.
     */
    createOrder(marker: string, data: IOrderData, langCode?: string): Promise<IBaseOrdersEntity>;
    /**
     * Getting all orders from the orders storage object created by the user
     *
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     * @param {number} marker - Textual identifier of the order storage object
     * @param {string} [langCode] Optional language field
     * @param {number} [limit] Limit parameter. Default 30
     * @param {number} [offset] Offset parameter. Default 0
     */
    getAllOrdersByMarker(marker: string, langCode?: string, limit?: number, offset?: number): Promise<Array<IOrdersByMarkersEntity>>;
    /**
     * Changing an order in the orders storage
     *
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     * @param marker - The text identifier of the order storage object
     * @param id - ID of the order object
     * @param data Object for updating an order
     * @param langCode Optional language field
     *
     * @example
     * const body = {
     *   "formIdentifier": "bar-orders-form",
     *   "paymentAccountIdentifier": "usd-payment",
     *   "formData": {
     *       "marker": "name_1",
     *       "value": "Name",
     *       "type": "string"
     *   },
     *   "products": [
     *     {
     *       "productId": 1,
     *       "quantity": 2
     *     }
     *   ],Сочи
     *   "currency": "USD"
     * }
     */
    updateOrderByMarkerAndId(marker: string, id: number, data: IOrderData, langCode?: string): Promise<IBaseOrdersEntity>;
    /**
     * Getting all the order storage objects
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     *
     * @param {number} [langCode] Optional language field
     * @param {number} [limit] - Optional parameter for pagination, default is 0
     * @param {number} [offset] - Optional parameter for pagination, default is 30
     */
    getAllOrders(langCode?: string, limit?: number, offset?: number): Promise<Array<IOrdersEntity>>;
    /**
     * Retrieve one order storage object by marker.
     *
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     * @param {string} marker - Marker of the order object
     * @param {string} [langCode] - Language code
     *
     * @returns Return object of order information.
     */
    getOrderByMarker(marker: string, langCode?: string): Promise<IOrdersEntity>;
}
