"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const asyncModules_1 = require("../base/asyncModules");
/**
 * Controllers for working with orders
 */
class OrdersApi extends asyncModules_1.default {
    constructor(state) {
        super(state);
        this._url = state.url + '/api/content/orders-storage';
    }
    /**
     * Creation of an order in the order storage.
     *
     * @param {string} marker - Textual identifier of the order storage object
     * @param {IOrderData} data - Object for creating an order
     * @param {String} langCode - Optional language field
     *
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     *
     * @example
     * const body = {
     *   "formIdentifier": "bar-orders-form",
     *   "paymentAccountIdentifier": "usd-payment",
     *   "formData": {
     *       "marker": "name_1",
     *       "value": "Name",
     *       "type": "string"
     *   },
     *   "products": [
     *     {
     *       "productId": 1,
     *       "quantity": 2,
     *     }
     *   ],
     * }
     *
     * @returns Returns object for creating an order.
     */
    async createOrder(marker, data, langCode = this.state.lang) {
        const formData = {};
        formData[langCode] = Array.isArray(data.formData) ? data.formData : [data.formData];
        data.formData = formData;
        const result = await this._fetchPost(`/marker/${marker}/orders`, data);
        return this._normalizeData(result);
    }
    /**
     * Getting all orders from the orders storage object created by the user
     *
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     * @param {number} marker - Textual identifier of the order storage object
     * @param {string} [langCode] Optional language field
     * @param {number} [limit] Limit parameter. Default 30
     * @param {number} [offset] Offset parameter. Default 0
     */
    async getAllOrdersByMarker(marker, langCode = this.state.lang, limit = 30, offset = 0) {
        const result = await this._fetchGet(`/marker/${marker}/orders?langCode=${langCode}&limit=${limit}&offset=${offset}`);
        return this._normalizeData(result.items);
    }
    /**
     * Changing an order in the orders storage
     *
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     * @param marker - The text identifier of the order storage object
     * @param id - ID of the order object
     * @param data Object for updating an order
     * @param langCode Optional language field
     *
     * @example
     * const body = {
     *   "formIdentifier": "bar-orders-form",
     *   "paymentAccountIdentifier": "usd-payment",
     *   "formData": {
     *       "marker": "name_1",
     *       "value": "Name",
     *       "type": "string"
     *   },
     *   "products": [
     *     {
     *       "productId": 1,
     *       "quantity": 2
     *     }
     *   ],Сочи
     *   "currency": "USD"
     * }
     */
    async updateOrderByMarkerAndId(marker, id, data, langCode = this.state.lang) {
        const formData = {};
        formData[langCode] = Array.isArray(data.formData) ? data.formData : [data.formData];
        data.formData = formData;
        const result = await this._fetchPut(`/marker/${marker}/orders/${id}?langCode=${langCode}`, data);
        return this._normalizeData(result);
    }
    /**
     * Getting all the order storage objects
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     *
     * @param {number} [langCode] Optional language field
     * @param {number} [limit] - Optional parameter for pagination, default is 0
     * @param {number} [offset] - Optional parameter for pagination, default is 30
     */
    async getAllOrders(langCode = this.state.lang, limit = 30, offset = 0) {
        const result = await this._fetchGet(`?langCode=${langCode}&limit=${limit}&offset=${offset}`);
        return this._normalizeData(result);
    }
    /**
     * Retrieve one order storage object by marker.
     *
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     * @param {string} marker - Marker of the order object
     * @param {string} [langCode] - Language code
     *
     * @returns Return object of order information.
     */
    async getOrderByMarker(marker, langCode = this.state.lang) {
        const result = await this._fetchGet(`/marker/${marker}?langCode=${langCode}`);
        return this._normalizeData(result);
    }
}
exports.default = OrdersApi;
