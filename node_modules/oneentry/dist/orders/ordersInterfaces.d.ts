/**
 * Represents an interface object of Orders Api.
 *
 * @property {function} getOrderByMarker - Retrieve one order storage object by marker.
 * @property {function} createOrder - Creation of an order in the order storage.
 * @property {function} updateOrderByMarkerAndId - Changing an order in the order store.
 * @property {function} getAllOrders - Getting all the order storage objects.
 * @property {function} getAllOrdersByMarker - Getting one order storage object by marker.
 * @property {function} setAccessToken - Only for custom authorization. An intermediate method for setting up an access token.

 */
interface IOrdersApi {
    getOrderByMarker(marker: string, langCode?: string): Promise<IOrdersEntity>;
    createOrder(marker: string, data: IOrderData): Promise<IBaseOrdersEntity>;
    updateOrderByMarkerAndId(marker: string, id: number, data: IOrderData, langCode?: string): Promise<IBaseOrdersEntity>;
    getAllOrders(langCode?: string, limit?: number, offset?: number): Promise<Array<IOrdersEntity>>;
    getAllOrdersByMarker(marker: string, langCode?: string, limit?: number, offset?: number): Promise<Array<IOrdersByMarkersEntity>>;
}
/**
 * @property {string} filename
 * @property {string} downloadLink
 * @property {number} size
 * @property {string} previewLink
 */
interface IPicture {
    filename: string;
    downloadLink: string;
    size: number;
    previewLink: string;
}
interface IOrderProducts {
    id: number;
    title: string;
    sku: string | null;
    price: number;
    quantity: number | null;
    previewImage: Array<IPicture>;
}
/**
 * @property {string} marker - Marker of form field.
 * @property {string} value - Value
 * @property {string} type - Type of value. Example "string"
 */
interface IOrdersFormData {
    marker: string;
    value: any;
    type: string;
}
/**
 * @interface
 * @property {number} productId - Product identifier.
 * @property {number} quantity - Quantity of the product.
 */
interface IOrderProductData {
    productId: number;
    quantity: number;
}
/**
 * @interface
 * @property {string} statusIdentifier - Text identifier of the order status.
 * @property {string} formIdentifier - Text identifier of the form status.
 * @property {string} statusIdentifier - Text identifier of order status object (if not set, default status will be assigned).
 * @property {string} paymentAccountIdentifier - Text identifier of the order payment.
 * @property {Array<IOrdersFormData>} formData - Data submitted by the form linked to the order store.
 * @property {Array<IOrderProducts>} products - Array of products added to order.
 * @property {string} createdDate - Order creation date.
 * @property {string} totalSum - Total order amount.
 * @property {string} currency - Currency used to pay for the order.
 * @property {string} createdDate - Date when the order was created.
 */
interface IBaseOrdersEntity {
    formIdentifier: string;
    paymentAccountIdentifier: string;
    statusIdentifier: string;
    formData: Array<IOrdersFormData>;
    products: Array<IOrderProductData>;
    createdDate: string;
    totalSum: string;
    currency: string;
    id: number;
}
/**
 * @interface
 * @property {number} id - Object identifier.
 * @property {Record<string, any>} localizeInfos - Name considering localization.
 * @property {string} identifier - Textual identifier for the record field.
 * @property {number} generalTypeId - Type identifier.
 * @property {string} formIdentifier - Textual identifier for the form used by the order storage.
 * @property {Array<{identifier:string}>} paymentAccountIdentifiers - Array of textual identifiers of payment accounts used by the order storage.
 * @property {number | null} position
 */
interface IOrdersEntity {
    id: number;
    localizeInfos: Record<string, any>;
    identifier: string | null;
    generalTypeId: number | null;
    formIdentifier: string | null;
    paymentAccountIdentifiers: Array<IPaymentAccountIdentifiers>;
    position: number | null;
}
interface IPaymentAccountIdentifiers {
    identifier: string;
}
/**
 * @interface
 * @property {string} formIdentifier - Text identifier of the form object linked to the order repository.
 * @property {string} paymentAccountIdentifier - Text identifier of the payment object linked to the order repository.
 * @property {IOrdersFormData | Array<IOrdersFormData>} formData - Form data linked to the order repositor.
 * @property {Array<IOrderProductData>} products - An array of ordered products.
 */
interface IOrderData {
    formIdentifier: string;
    paymentAccountIdentifier: string;
    formData: IOrdersFormData | Array<IOrdersFormData>;
    products: Array<IOrderProductData>;
}
/**
 * @interface
 * @property {string} statusIdentifier - Text identifier of the order status.
 * @property {string} formIdentifier - Text identifier of the form status.
 * @property {Array<IOrdersFormData>} formData - Data submitted by the form linked to the order store.
 * @property {Array<IOrderProducts>} products - Array of products added to order.
 * @property {string} totalSum - Total order amount.
 * @property {string} currency - Currency used to pay for the order.
 * @property {string} createdDate - Date when the order was created.
 * @property {string} paymentAccountIdentifier - Textual identifier for the order payment.
 * @property {Record<string, any>} paymentAccountLocalizeInfos - Payment account name considering localization.
 * @property {boolean} isHistory - Indicates that the order has been saved in the order history.
 */
interface IOrdersByMarkersEntity {
    attributeSetIdentifier: string;
    statusIdentifier: string;
    formIdentifier: string;
    formData: Array<IOrdersFormData>;
    products: Array<IOrderProducts>;
    totalSum: string;
    currency: string;
    createdDate: string;
    paymentAccountIdentifier: string;
    paymentAccountLocalizeInfos: Record<string, any>;
    isHistory: boolean;
    id: number;
}
export { IOrdersEntity, IBaseOrdersEntity, IOrderProducts, IPicture, IOrdersApi, IOrderData, IOrderProductData, IOrdersFormData, IOrdersByMarkersEntity, IPaymentAccountIdentifiers };
