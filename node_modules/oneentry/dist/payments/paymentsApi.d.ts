import AsyncModules from "../base/asyncModules";
import { IPaymentsApi, ISessionEntity, IConnectedEntity, IAccountsEntity, ICreateSessionEntity } from "./paymentsInterfaces";
import StateModule from "../base/stateModule";
/**
 * Controllers for working with payments
 */
export default class PaymentsApi extends AsyncModules implements IPaymentsApi {
    protected state: StateModule;
    protected _url: string;
    constructor(state: StateModule);
    /**
     * Get list of payment sessions.
     *
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     * @param {number} [limit] - Optional parameter for pagination, default is 0
     * @param {number} [offset] - Optional parameter for pagination, default is 30
     *
     * @returns Returns an array of SessionEntity objects.
     */
    getSessions(limit?: number, offset?: number): Promise<Array<ISessionEntity>>;
    /**
     * Get a single payment session object by its identifier.
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     *
     * @param {number} id - Identifier of the retrieved payment session object
     *
     * @returns Returns a single payment session object.
     */
    getSessionById(id: number): Promise<ISessionEntity>;
    /**
     * Creation of payment session.
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     *
     * @param {number} orderId - Order identifier
     * @param {'session' | 'intent'} type - Session type
     * @param {boolean} automaticTaxEnabled - Automatic calculation of the tax rate
     *
     * @returns Returns a single payment session object.
     */
    createSession(orderId: number, type: 'session' | 'intent', automaticTaxEnabled?: boolean): Promise<ICreateSessionEntity>;
    /**
     * Get payment settings.
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     *
     * @returns Returns object PaymentsConnected or null.
     */
    getConnected(): Promise<IConnectedEntity | null>;
    /**
     * Get all payment accounts as an array.
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     *
     * @returns Returns all created payment accounts as an array of PaymentAccountEntity objects.
     */
    getAccounts(): Promise<Array<IAccountsEntity>>;
    /**
     * Get a single payment account object by its identifier.
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     *
     * @param {number} id - Identifier of the retrieved payment account object
     *
     * @returns Returns a single payment account object.
     */
    getAccountById(id: number): Promise<IAccountsEntity>;
    /**
     * Webhook for Stripe.
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     *
     * @returns Returns true (in case of successful execution) or false (in case of unsuccessful execution)
     */
    webhookStripe(): Promise<boolean>;
}
