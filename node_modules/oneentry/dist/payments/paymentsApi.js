"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const asyncModules_1 = require("../base/asyncModules");
/**
 * Controllers for working with payments
 */
class PaymentsApi extends asyncModules_1.default {
    constructor(state) {
        super(state);
        this._url = state.url + '/api/content/payments';
    }
    /**
     * Get list of payment sessions.
     *
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     * @param {number} [limit] - Optional parameter for pagination, default is 0
     * @param {number} [offset] - Optional parameter for pagination, default is 30
     *
     * @returns Returns an array of SessionEntity objects.
     */
    async getSessions(limit = 30, offset = 0) {
        const result = await this._fetchGet('/sessions');
        return result.items;
    }
    /**
     * Get a single payment session object by its identifier.
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     *
     * @param {number} id - Identifier of the retrieved payment session object
     *
     * @returns Returns a single payment session object.
     */
    async getSessionById(id) {
        const result = await this._fetchGet(`/sessions/${id}`);
        return result;
    }
    /**
     * Creation of payment session.
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     *
     * @param {number} orderId - Order identifier
     * @param {'session' | 'intent'} type - Session type
     * @param {boolean} automaticTaxEnabled - Automatic calculation of the tax rate
     *
     * @returns Returns a single payment session object.
     */
    async createSession(orderId, type, automaticTaxEnabled) {
        const result = await this._fetchPost('/sessions', {
            type,
            orderId
        });
        return result;
    }
    /**
     * Get payment settings.
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     *
     * @returns Returns object PaymentsConnected or null.
     */
    async getConnected() {
        const result = await this._fetchGet('/connected');
        return result;
    }
    /**
     * Get all payment accounts as an array.
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     *
     * @returns Returns all created payment accounts as an array of PaymentAccountEntity objects.
     */
    async getAccounts() {
        const result = await this._fetchGet('/accounts');
        return this._normalizeData(result);
    }
    /**
     * Get a single payment account object by its identifier.
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     *
     * @param {number} id - Identifier of the retrieved payment account object
     *
     * @returns Returns a single payment account object.
     */
    async getAccountById(id) {
        const result = await this._fetchGet(`/accounts/${id}`);
        return result;
    }
    /**
     * Webhook for Stripe.
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     *
     * @returns Returns true (in case of successful execution) or false (in case of unsuccessful execution)
     */
    async webhookStripe() {
        const result = await this._fetchPost('/webhook/stripe', {});
        return result;
    }
}
exports.default = PaymentsApi;
