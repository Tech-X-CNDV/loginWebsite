import AsyncModules from '../base/asyncModules';
import { ITemplatesApi, ITemplateEntity } from './templatesInterfaces';
import { Types } from "../base/utils";
import StateModule from "../base/stateModule";
/**
 * Controllers for working with template objects
 */
export default class TemplatesPreviewApi extends AsyncModules implements ITemplatesApi {
    protected state: StateModule;
    protected _url: string;
    constructor(state: StateModule);
    /**
     * Get all template objects grouped by types.
     * @param {string} [langCode] - Optional parameter language code
     *
     * @returns Returns an object GroupedTemplatesObject, which contains an array of template objects TemplateEntity
     */
    getAllTemplates(langCode?: string): Promise<Record<Types, ITemplateEntity>>;
    /**
     * Get template objects by type.
     *
     * @param {Types} type - Product marker
     * @param {string} [langCode] - Optional parameter language code
     *
     * @returns Returns a TemplateEntity object
     */
    getTemplateByType(type: Types): Promise<Array<ITemplateEntity>>;
    /**
     * Get one template object by id.
     *
     * @param {number} id - Template id
     *
     * @returns Returns a TemplateEntity object
     */
    getTemplateById(id: number): Promise<Record<Types, ITemplateEntity>>;
}
