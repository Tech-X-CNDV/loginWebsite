import { Types } from "../base/utils";
/**
 * Represents an interface object of Templates Api.
 *
 * @property {function} getAllTemplates - Get all template objects grouped by types.
 * @property {function} getTemplateByType - Get template objects by type.
 * @property {function} getTemplateById - Get one template object by id.
 */
interface ITemplatesApi {
    getAllTemplates(langCode: string): Promise<Record<Types, ITemplateEntity>>;
    getTemplateByType(type: Types, langCode: string): Promise<Array<ITemplateEntity>>;
    getTemplateById(id: number): Promise<Record<Types, ITemplateEntity>>;
}
/**
 * Represents a template entity object.
 *
 * @interface
 * @property {number} id - The unique identifier of the position.
 * @property {number} version - The version number of the object.
 * @property {string} identifier - The textual identifier for the record field.
 * @property {number} generalTypeId - General type Entity id.
 * @property {string} title - The name of the template.
 * @property {number} position - The position of the object.
 * @property {Types} generalTypeName - General type name.
 *
 */
interface ITemplateEntity {
    id: number;
    version: number;
    identifier: string;
    generalTypeId: number;
    title: string;
    position: number;
    generalTypeName: Types;
}
export { ITemplatesApi, ITemplateEntity, };
