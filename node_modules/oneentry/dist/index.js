"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defineOneEntry = void 0;
const productsApi_1 = require("./products/productsApi");
const pagesApi_1 = require("./pages/pagesApi");
const productStatusesApi_1 = require("./product-statuses/productStatusesApi");
const templatesApi_1 = require("./templates/templatesApi");
const templatesPreviewApi_1 = require("./templates-preview/templatesPreviewApi");
const adminsApi_1 = require("./admins/adminsApi");
const typesApi_1 = require("./general-types/typesApi");
const localesApi_1 = require("./locales/localesApi");
const menusApi_1 = require("./menus/menusApi");
const formsApi_1 = require("./forms/formsApi");
const formsDataApi_1 = require("./formsData/formsDataApi");
const fileUploadingApi_1 = require("./file-uploding/fileUploadingApi");
const systemApi_1 = require("./system/systemApi");
const blocksApi_1 = require("./blocks/blocksApi");
const attributeSetsApi_1 = require("./attribute-sets/attributeSetsApi");
const ordersApi_1 = require("./orders/ordersApi");
const paymentsApi_1 = require("./payments/paymentsApi");
const authProviderApi_1 = require("./auth-provider/authProviderApi");
const eventsApi_1 = require("./events/eventsApi");
const usersApi_1 = require("./users/usersApi");
const stateModule_1 = require("./base/stateModule");
/**
 * Define API.
 * @param {string} url - URl of your project.
 * @param {IConfig} config - Custom configuration settings
 * @param {string} [config.token] - Optional token parameter
 * @param {string} [config.langCode] - Optional langCode parameter
 * @param {boolean} [config.traficLimit] - Some methods use multiple queries to make it easier to work with the API. Set this parameter to "false" to save traffic and decide for yourself what data you need.
 * @param {string} [config.auth] - An object with authorization settings.
 * @param {boolean} [config.auth.customAuth] - Set this flag to true if you want to configure the authorization process yourself. Set the flag to false, or do not pass it at all to have automatic authorization and token renewal.
 * @param {string} [config.auth.refreshToken] - Transfer the refresh token here, for example from the local storage, to resume the user's session. Otherwise, the user will need to log in every time a new session is created.
 * @param {string} [config.auth.saveFunction] - If you want to store the token between sessions, for example in local storage, create a custom function that takes refreshToken as a parameter and executes the necessary instructions. This function will be called every time the tokens are updated.
 * @returns {IDefineApi} - List of methods set.
 */
function defineOneEntry(url, config) {
    const stateModule = new stateModule_1.default(url, config);
    const Admins = new adminsApi_1.default(stateModule);
    const AttributesSets = new attributeSetsApi_1.default(stateModule);
    const AuthProvider = new authProviderApi_1.default(stateModule);
    const Blocks = new blocksApi_1.default(stateModule);
    const Events = new eventsApi_1.default(stateModule);
    const FileUploading = new fileUploadingApi_1.default(stateModule);
    const Forms = new formsApi_1.default(stateModule);
    const FormData = new formsDataApi_1.default(stateModule);
    const GeneralTypes = new typesApi_1.default(stateModule);
    const Locales = new localesApi_1.default(stateModule);
    const Menus = new menusApi_1.default(stateModule);
    const Orders = new ordersApi_1.default(stateModule);
    const Pages = new pagesApi_1.default(stateModule);
    const Payments = new paymentsApi_1.default(stateModule);
    const Products = new productsApi_1.default(stateModule);
    const ProductStatuses = new productStatusesApi_1.default(stateModule);
    const System = new systemApi_1.default(stateModule);
    const Templates = new templatesApi_1.default(stateModule);
    const TemplatePreviews = new templatesPreviewApi_1.default(stateModule);
    const Users = new usersApi_1.default(stateModule);
    return {
        Admins,
        AttributesSets,
        AuthProvider,
        Blocks,
        Events,
        FileUploading,
        Forms,
        FormData,
        GeneralTypes,
        Locales,
        Menus,
        Orders,
        Pages,
        Payments,
        Products,
        ProductStatuses,
        System,
        Templates,
        TemplatePreviews,
        Users
    };
}
exports.defineOneEntry = defineOneEntry;
