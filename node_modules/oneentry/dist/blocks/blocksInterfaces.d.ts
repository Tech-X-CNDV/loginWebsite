import { IProductsEntity } from "../products/productsInterfaces";
/**
 * Represents a interface object of Blocks Api.
 *
 * @property {function} getBlocks - Get all Blocks objects.
 * @property {function} getBlockByMarker - Get Block object by marker.
 * @property {function} getSimilarProducts - Get Array of similar products from product-similar block.
 * @property {function} getProductsByBlockMarker - Get Array of products from product block.
 * @property {function} searchBlock - Quick search for block objects with limited output.
 */
interface IBlocks {
    getBlocks(type: BlockType, langCode?: string, offset?: number, limit?: number): Promise<Array<IBlockEntity | IBlocksResponse>>;
    getBlockByMarker(marker: string, langCode: string): Promise<IBlockEntity>;
    getSimilarProducts(marker: string, langCode?: string, offset?: number, limit?: number): Promise<Array<IProductsEntity>>;
    getProductsByBlockMarker(marker: string, langCode?: string, offset?: number, limit?: number): Promise<Array<IProductsEntity>>;
    searchBlock(name: string, langCode?: string): Promise<Array<ISearchBlock>>;
}
interface IBlocksResponse {
    id: number;
    attributesSetIdentifier: string | null;
    localizeInfos: Record<string, any>;
    customSettings: ICustomSetting | null;
    version: number;
    identifier: string;
    isVisible: boolean;
    position: number;
    attributeValues: Record<string, any>;
    type: string;
    templateIdentifier: string | null;
    countElementsPerRow?: number;
    productPageUrls: Array<any>;
    similarProducts?: Array<IProductsEntity>;
    products?: Array<IProductsEntity>;
}
interface IBlockEntity {
    attributeValues: Record<string, any>;
    id: number;
    identifier: string;
    isVisible: boolean;
    localizeInfos: Record<string, any>;
    position: number;
    templateIdentifier: string | null;
    type: string;
    version: number;
    similarProducts?: Array<IProductsEntity>;
    products?: Array<IProductsEntity>;
    countElementsPerRow: number;
}
interface ICustomSetting {
    sliderDelay: number;
    sliderDelayType: string;
    productQuantity: number;
    productSortType: string;
    productSortOrder: string;
    productCountElementsPerRow: number;
    similarProductRules: Array<{
        property: string;
        includes: string;
        keywords: string;
        strict: string;
    }> | Record<string, any>;
    [key: string]: any;
}
interface ISearchBlock {
    id: number;
    name: string;
    identifier: string;
}
type BlockType = 'forCatalogProducts' | 'forBasketPage' | 'forErrorPage' | 'forCatalogPages' | 'forProductPreview' | 'forProductPage' | 'forSimilarProductBlock' | 'forStatisticProductBlock' | 'forProductBlock' | 'forForm' | 'forFormField' | 'forNewsPage' | 'forNewsBlock' | 'forNewsPreview' | 'forOneNewsPage' | 'forUsualPage' | 'forTextBlock' | 'forSlider' | 'forOrder' | 'service' | 'none';
export { IBlocks, IBlockEntity, IBlocksResponse, ICustomSetting, ISearchBlock, BlockType };
