import AsyncModules from "../base/asyncModules";
import { IBlocks, IBlocksResponse, IBlockEntity, ISearchBlock, BlockType } from "./blocksInterfaces";
import { IProductsEntity } from "../products/productsInterfaces";
import StateModule from "../base/stateModule";
/**
 * Controllers for working with blocks
 */
export default class BlocksApi extends AsyncModules implements IBlocks {
    protected state: StateModule;
    protected _url: string;
    constructor(state: StateModule);
    /**
     * Get blocks by parameters.
     *
     * @param {BlockType} type - Available values : forCatalogProducts, forBasketPage, forErrorPage, forCatalogPages, forProductPreview, forProductPage, forSimilarProductBlock, forStatisticProductBlock, forProductBlock, forForm, forFormField, forNewsPage, forNewsBlock, forNewsPreview, forOneNewsPage, forUsualPage, forTextBlock, forSlider, forOrder, service
     * @param {string} [langCode] - Language code. Default "en_US"
     * @param {number} [offset] - Parameter for pagination. Default 0
     * @param {number} [limit] - Parameter for pagination. Default 30
     *
     * @returns Return array of BlocksEntity object.
     */
    getBlocks(type: BlockType, langCode?: string, offset?: number, limit?: number): Promise<Array<IBlockEntity | IBlocksResponse>>;
    /**
     * Get block by marker.
     *
     * @param {string} marker - Marker of Block.
     * @param {string} [langCode] - Language code. Default "en_US"
     *
     * @returns Return BlocksEntity object.
     */
    getBlockByMarker(marker: string, langCode?: string): Promise<IBlockEntity>;
    /**
     * Get similar products by block marker.
     *
     * @param {string} marker - Block identifier
     * @param {string} [langCode] - Language code. Default "en_US"
     * @param {number} [offset] - Parameter for pagination. Default 0
     * @param {number} [limit] - Parameter for pagination. Default 30
     *
     * @returns Return array of BlocksEntity object.
     */
    getSimilarProducts(marker: string, langCode?: string, offset?: number, limit?: number): Promise<Array<IProductsEntity>>;
    /**
     * Get products by block marker.
     *
     * @param {string} marker - Block identifier
     * @param {string} [langCode] - Language code. Default "en_US"
     * @param {number} [offset] - Parameter for pagination. Default 0
     * @param {number} [limit] - Parameter for pagination. Default 30
     *
     * @returns Return array of BlocksEntity object.
     */
    getProductsByBlockMarker(marker: string, langCode?: string, offset?: number, limit?: number): Promise<Array<IProductsEntity>>;
    /**
     * Quick search for block objects with limited output
     * @param name - Search string
     * @param [langCode] - Language code. Default "en_US"
     */
    searchBlock(name: string, langCode?: string): Promise<Array<ISearchBlock>>;
}
