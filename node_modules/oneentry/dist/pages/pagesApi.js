"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const asyncModules_1 = require("../base/asyncModules");
const blocksApi_1 = require("../blocks/blocksApi");
/**
 * Controllers for working with page objects, including catalog pages
 */
class PageApi extends asyncModules_1.default {
    constructor(state) {
        super(state);
        this._url = state.url + '/api/content/pages';
    }
    /**
     * Get all top-level page objects.
     *
     * @param {string} [langCode] Required parameter lang code
     *
     * @returns Returns all created pages without parents as an array of PageEntity objects or an empty array [] (if there is no data)
     */
    async getRootPages(langCode = this.state.lang) {
        const result = await this._fetchGet(`/root?langCode=${langCode}`);
        return this._normalizeData(result, langCode);
    }
    /**
     * Get all page objects with product information as an array.
     *
     * @param {string} [langCode] Required parameter lang code
     *
     * @returns Returns all created pages as an array of PageEntity objects or an empty array [] (if there is no data)
     */
    async getPages(langCode = this.state.lang) {
        const result = await this._fetchGet(`?langCode=${langCode}`);
        return this._normalizeData(result, langCode);
    }
    /**
     * Get page object with information about forms, blocks, menus, linked to the page.
     *
     * @param {string} [langCode] Required parameter lang code
     *
     * @param {number} [id] - Page object identifier
     *
     * @returns Returns PageEntity object
     */
    async getPageById(id, langCode = this.state.lang) {
        const result = await this._fetchGet(`/${id}?langCode=${langCode}`);
        return this._normalizeData(result, langCode);
    }
    /**
     * Get page object with information about forms, blocks, menus, linked to the page by URL.
     *
     * @param {string} [langCode] Required parameter lang code
     *
     * @param {string} [url] - Page URL
     *
     * @returns Returns PageEntity object
     */
    async getPageByUrl(url, langCode = this.state.lang) {
        const result = await this._fetchGet(`/url/${url}?langCode=${langCode}`);
        return this._normalizeData(result, langCode);
    }
    /**
     * Get child pages object with information as an array.
     *
     * @param {string} [langCode] Required parameter lang code
     *
     * @param {string} [url] - Page URL
     *
     * @returns Returns all created pages as an array of PageEntity objects or an empty array [] (if there is no data) for the selected parent
     */
    async getChildPagesByParentUrl(url, langCode = this.state.lang) {
        const result = await this._fetchGet(`/${url}/children?langCode=${langCode}`);
        return this._normalizeData(result, langCode);
    }
    /**
     * Get all forms by page url.
     *
     * @param {string} [langCode] Required parameter lang code
     *
     * @param {string} [url] - Page URL
     *
     * @returns Returns all forms as an array of PositionForm objects or an empty array [] (if there is no data) for the selected parent
     */
    async getFormsByPageUrl(url, langCode = this.state.lang) {
        const result = await this._fetchGet(`/${url}/forms?langCode=${langCode}`);
        return this._normalizeData(result, langCode);
    }
    /**
     * Get all blocks by page url.
     *
     * @param {string} [langCode] Required parameter lang code
     *
     * @param {string} [url] - Page URL
     *
     * @returns Returns all blocks as an array of PositionBlock objects or an empty array [] (if there is no data) for the selected parent
     */
    async getBlocksByPageUrl(url, langCode = this.state.lang) {
        const response = await this._fetchGet(`/${url}/blocks?langCode=${langCode}`);
        const normalizeResponse = this._normalizeData(response);
        normalizeResponse.map((item) => {
            const customSettings = item.customSettings;
            if (customSettings && customSettings.hasOwnProperty('productConfig')) {
                item.countElementsPerRow = customSettings.productConfig.countElementsPerRow ? (+customSettings.productConfig.countElementsPerRow) : 0;
            }
            else {
                item.countElementsPerRow = 0;
            }
            delete item.customSettings;
            delete item.attributesSetIdentifier;
            return item;
        });
        if (this.state.multipleResponse) {
            const Blocks = new blocksApi_1.default(this.state);
            if (normalizeResponse.type === 'forSimilarProductBlock') {
                try {
                    await Blocks.getSimilarProducts(normalizeResponse.identifier, langCode).then((result) => {
                        normalizeResponse.similarProducts = this._normalizeData(result);
                    });
                }
                catch {
                    normalizeResponse.similarProducts = [];
                }
            }
            else if (normalizeResponse.type === 'forProductBlock') {
                try {
                    await Blocks.getProductsByBlockMarker(normalizeResponse.identifier, langCode).then((result) => {
                        normalizeResponse.products = this._normalizeData(result);
                    });
                }
                catch {
                    normalizeResponse.products = [];
                }
            }
        }
        return this._normalizeData(normalizeResponse);
    }
    /**
     * Get settings for the page.
     *
     * @param {string} [url] - Page URL
     *
     * @returns Returns a ConfigPage object with page display settings
     */
    async getConfigPageByUrl(url) {
        const result = await this._fetchGet(`/${url}/config`);
        return result;
    }
    /**
     * Quick search for page objects with limited output.
     *
     * @param {string} [name] - Text for searching page objects (search is performed on the title field of the localizeInfos object with the language taken into account)
     *
     * @param {string} [langCode] Required parameter lang code
     *
     * @returns Returns all created pages as an array of PageEntity objects or an empty array [] (if there is no data)
     */
    async searchPage(name, langCode = this.state.lang) {
        const searchPages = await this._fetchGet(`/quick/search?lang=${langCode}&name=${name}`);
        if (this.state.multipleResponse) {
            const pageList = [];
            await Promise.all(searchPages.map(async (page) => {
                await this.getPageById(page.id, langCode).then((result) => {
                    pageList.push(result);
                });
            }));
            return this._dataPostProcess(pageList, langCode);
        }
        return this._normalizeData(searchPages, langCode);
    }
}
exports.default = PageApi;
