import { IAttributes, LangType, Types } from "../base/utils";
/**
 * Represents an interface object of Pages Api.
 *
 * @property {function} getRootPages - Get all top-level page objects.
 *
 * @property {function} getCatalogPages - Get all page objects with product information as an array.
 *
 * @property {function} getPages - Get all page objects with product information as an array.
 *
 * @property {function} getPageById - Get page object with information about forms, blocks, menus, linked to the page.
 *
 * @property {function} getPageByUrl - Get page object with information about forms, blocks, menus, linked to the page by URL.
 *
 * @property {function} getChildPagesByParentUrl - Get child pages object with information as an array.
 *
 * @property {function} getFormsByPageUrl - Get all forms by page url.
 *
 * @property {function} getConfigPageByUrl - Get settings for the page.
 *
 * @property {function} searchPage - Quick search for page objects with limited output.
 */
interface IPageApi {
    getRootPages(langCode?: LangType): Promise<Array<IPagesEntity>>;
    getPages(langCode: LangType): Promise<Array<IPagesEntity>>;
    getPageById(id: number, langCode: LangType): Promise<IPagesEntity>;
    getPageByUrl(url: string, langCode: LangType): Promise<IPagesEntity>;
    getChildPagesByParentUrl(url: string, langCode: LangType): Promise<Array<IPagesEntity>>;
    getFormsByPageUrl(url: string, langCode: LangType): Promise<Array<IPositionForm>>;
    getBlocksByPageUrl(url: string, langCode: LangType): Promise<Array<IPositionBlock>>;
    getConfigPageByUrl(url: string): Promise<IPageConfig>;
    searchPage(name: string, langCode: LangType): Promise<Array<IPagesEntity>>;
}
/**
 * Represents a config object.
 *
 * @interface
 * @property {number} rowsPerPage - Number of lines per page.
 *
 * @property {number} rowsPerPage - Number of products per page.
 */
interface IPageConfig {
    rowsPerPage: number;
    productsPerRow: number;
}
/**
 * Represents an object with various properties.
 *
 * @interface
 * @property {number} id - The identifier of the object.
 * @property {number} version - The version number of the object.
 * @property {string} identifier - The textual identifier for the record field.
 * @property {Array<IAttributes>} attributes - Array of attribute values from the used attribute set for displaying the form (taking into account the specified language).
 * @property {number} attributeSetId - The identifier of the attribute set being used.
 * @property {string} processingType - Type of form processing.
 * @property {Record<string, any>} localizeInfos - The name of the page, taking into account localization.
 * @property {object} processingData - Form data.
 * @property {number} position - The position of the object.
 */
interface IPositionForm {
    id: number;
    version: number;
    identifier: string;
    attributes: Array<IAttributes> | IAttributes;
    attributeSetId: number;
    processingType: string;
    localizeInfos: Record<string, any>;
    processingData: Record<string, any>;
    position: number;
}
/**
 * Represents an object with various properties.
 *
 * @interface
 * @property {number} id - The identifier of the object.
 * @property {number} version - The version number of the object.
 * @property {string} identifier - The textual identifier for the record field.
 * @property {Record<string, any>} localizeInfos - The name of the page, taking into account localization.
 * @property {number} position - The position of the object.
 * @property {boolean} isSync - Indication of page indexing.
 * @property {Record<string, any>} attributeValues - Array of attribute values from the index (represented as a pair of user attribute id: attribute value).
 * @property {string} attributeSetIdentifier
 * @property {Types} type - Page type.
 */
interface IPositionBlock {
    id: number;
    version: number;
    identifier: string;
    localizeInfos: Record<string, any>;
    position: number;
    isSync: boolean;
    isVisible: boolean;
    attributeValues: Record<string, any>;
    attributeSetIdentifier: string | null;
    type: string;
    templateIdentifier: string | null;
    countElementsPerRow: number;
}
/**
 * Represents an object with various properties.
 *
 * @interface
 * @property {number} id - The identifier of the object.
 * @property {number} parentId - The id of the parent page, if it contains null, then it is the top-level page.
 * @property {Record<string, number>} config - Output settings for catalog pages.
 * @property {string} pageUrl - Unique page Url.
 * @property {number} depth - Page nesting depth relative to parentId.
 * @property {Record<string, any>} localizeInfos - The name of the page, taking into account localization.
 * @property {boolean} isVisible - A sign of page visibility.
 * @property {number} products - The number of products linked to the page.
 * @property {string} attributeSetIdentifier - Set of attributes id.
 * @property {boolean} isSync - Indication of page indexing.
 * @property {string} templateIdentifier - User id of the linked template.
 * @property {Record<string, any>} attributeValues - Array of attribute values from the index (represented as a pair of user attribute id: attribute value).
 * @property {number} position - Item number (for sorting).
 * @property {Types} type - Page type.
 * @property {number} childrenCount - Children count.
 */
interface IPagesEntity {
    attributeSetIdentifier: string;
    attributeValues: Record<string, any>;
    childrenCount?: number;
    config?: Record<string, number>;
    depth: number;
    id: number;
    isSync: boolean;
    isVisible: boolean;
    forms?: Record<string, any>;
    blocks?: Record<string, any>;
    localizeInfos: Record<string, any>;
    pageUrl: string;
    parentId: number | null;
    position?: number;
    products?: number;
    templateIdentifier: string | null;
    type: Types;
}
export { IPageApi, IPageConfig, IPagesEntity, IPositionForm, IPositionBlock };
