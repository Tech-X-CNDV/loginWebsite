import AsyncModules from "../base/asyncModules";
import { IPageApi, IPageConfig, IPagesEntity, IPositionForm, IPositionBlock } from "./pagesInterfaces";
import StateModule from "../base/stateModule";
/**
 * Controllers for working with page objects, including catalog pages
 */
export default class PageApi extends AsyncModules implements IPageApi {
    protected state: StateModule;
    protected _url: string;
    constructor(state: StateModule);
    /**
     * Get all top-level page objects.
     *
     * @param {string} [langCode] Required parameter lang code
     *
     * @returns Returns all created pages without parents as an array of PageEntity objects or an empty array [] (if there is no data)
     */
    getRootPages(langCode?: string): Promise<Array<IPagesEntity>>;
    /**
     * Get all page objects with product information as an array.
     *
     * @param {string} [langCode] Required parameter lang code
     *
     * @returns Returns all created pages as an array of PageEntity objects or an empty array [] (if there is no data)
     */
    getPages(langCode?: string): Promise<Array<IPagesEntity>>;
    /**
     * Get page object with information about forms, blocks, menus, linked to the page.
     *
     * @param {string} [langCode] Required parameter lang code
     *
     * @param {number} [id] - Page object identifier
     *
     * @returns Returns PageEntity object
     */
    getPageById(id: number, langCode?: string): Promise<IPagesEntity>;
    /**
     * Get page object with information about forms, blocks, menus, linked to the page by URL.
     *
     * @param {string} [langCode] Required parameter lang code
     *
     * @param {string} [url] - Page URL
     *
     * @returns Returns PageEntity object
     */
    getPageByUrl(url: string, langCode?: string): Promise<IPagesEntity>;
    /**
     * Get child pages object with information as an array.
     *
     * @param {string} [langCode] Required parameter lang code
     *
     * @param {string} [url] - Page URL
     *
     * @returns Returns all created pages as an array of PageEntity objects or an empty array [] (if there is no data) for the selected parent
     */
    getChildPagesByParentUrl(url: string, langCode?: string): Promise<Array<IPagesEntity>>;
    /**
     * Get all forms by page url.
     *
     * @param {string} [langCode] Required parameter lang code
     *
     * @param {string} [url] - Page URL
     *
     * @returns Returns all forms as an array of PositionForm objects or an empty array [] (if there is no data) for the selected parent
     */
    getFormsByPageUrl(url: string, langCode?: string): Promise<Array<IPositionForm>>;
    /**
     * Get all blocks by page url.
     *
     * @param {string} [langCode] Required parameter lang code
     *
     * @param {string} [url] - Page URL
     *
     * @returns Returns all blocks as an array of PositionBlock objects or an empty array [] (if there is no data) for the selected parent
     */
    getBlocksByPageUrl(url: string, langCode?: string): Promise<Array<IPositionBlock>>;
    /**
     * Get settings for the page.
     *
     * @param {string} [url] - Page URL
     *
     * @returns Returns a ConfigPage object with page display settings
     */
    getConfigPageByUrl(url: string): Promise<IPageConfig>;
    /**
     * Quick search for page objects with limited output.
     *
     * @param {string} [name] - Text for searching page objects (search is performed on the title field of the localizeInfos object with the language taken into account)
     *
     * @param {string} [langCode] Required parameter lang code
     *
     * @returns Returns all created pages as an array of PageEntity objects or an empty array [] (if there is no data)
     */
    searchPage(name: string, langCode?: string): Promise<Array<IPagesEntity>>;
}
