import ProductApi from './products/productsApi';
import PageApi from "./pages/pagesApi";
import ProductStatusesApi from "./product-statuses/productStatusesApi";
import TemplatesApi from "./templates/templatesApi";
import TemplatePreviewsApi from "./templates-preview/templatesPreviewApi";
import AdminsApi from "./admins/adminsApi";
import GeneralTypesApi from "./general-types/typesApi";
import LocalesApi from "./locales/localesApi";
import MenusApi from "./menus/menusApi";
import FormsApi from "./forms/formsApi";
import FormsDataApi from "./formsData/formsDataApi";
import FileUploadingApi from "./file-uploding/fileUploadingApi";
import SystemApi from "./system/systemApi";
import BlocksApi from "./blocks/blocksApi";
import AttributesSetsApi from "./attribute-sets/attributeSetsApi";
import { IConfig } from "./base/utils";
import OrdersApi from "./orders/ordersApi";
import PaymentsApi from "./payments/paymentsApi";
import AuthProviderApi from "./auth-provider/authProviderApi";
import EventsApi from "./events/eventsApi";
import UsersApi from "./users/usersApi";
interface IDefineApi {
    Admins: AdminsApi;
    AttributesSets: AttributesSetsApi;
    AuthProvider: AuthProviderApi;
    Blocks: BlocksApi;
    Events: EventsApi;
    FileUploading: FileUploadingApi;
    Forms: FormsApi;
    FormData: FormsDataApi;
    GeneralTypes: GeneralTypesApi;
    Locales: LocalesApi;
    Menus: MenusApi;
    Orders: OrdersApi;
    Pages: PageApi;
    Payments: PaymentsApi;
    Products: ProductApi;
    ProductStatuses: ProductStatusesApi;
    System: SystemApi;
    Templates: TemplatesApi;
    TemplatePreviews: TemplatePreviewsApi;
    Users: UsersApi;
}
/**
 * Define API.
 * @param {string} url - URl of your project.
 * @param {IConfig} config - Custom configuration settings
 * @param {string} [config.token] - Optional token parameter
 * @param {string} [config.langCode] - Optional langCode parameter
 * @param {boolean} [config.traficLimit] - Some methods use multiple queries to make it easier to work with the API. Set this parameter to "false" to save traffic and decide for yourself what data you need.
 * @param {string} [config.auth] - An object with authorization settings.
 * @param {boolean} [config.auth.customAuth] - Set this flag to true if you want to configure the authorization process yourself. Set the flag to false, or do not pass it at all to have automatic authorization and token renewal.
 * @param {string} [config.auth.refreshToken] - Transfer the refresh token here, for example from the local storage, to resume the user's session. Otherwise, the user will need to log in every time a new session is created.
 * @param {string} [config.auth.saveFunction] - If you want to store the token between sessions, for example in local storage, create a custom function that takes refreshToken as a parameter and executes the necessary instructions. This function will be called every time the tokens are updated.
 * @returns {IDefineApi} - List of methods set.
 */
export declare function defineOneEntry(url: string, config: IConfig): IDefineApi;
export {};
