"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const asyncModules_1 = require("../base/asyncModules");
/**
 * Controllers for working with auth services.
 */
class AuthProviderApi extends asyncModules_1.default {
    constructor(state) {
        super(state);
        this._url = state.url + '/api/content/users-auth-providers';
    }
    /**
     * User registration
     * @param {string} marker - The text identifier of the authorization provider. Example - email
     * @param data - Request body
     * @param {string} langCode - Optional language field
     *
     * @example
     * const data = {
     *   "formIdentifier": "reg",
     *   "authData": [
     *     {
     *       "marker": "login",
     *       "value": "example@oneentry.cloud"
     *     },
     *     {
     *       "marker": "password",
     *       "value": "12345"
     *     }
     *   ],
     *   "formData": [
     *       {
     *         "marker": "last_name",
     *         "type": "string",
     *         "value": "Name"
     *       }
     *   ],
     *   "notificationData": {
     *     "email": "example@oneentry.cloud",
     *     "phonePush": "+99999999999",
     *     "phoneSMS": "+99999999999"
     *   }
     * }
     */
    async signUp(marker, data, langCode = this.state.lang) {
        data['langCode'] = langCode;
        const body = this._normalizePostBody(data, langCode);
        const result = await this._fetchPost(`/marker/${marker}/users/sign-up`, body);
        return this._normalizeData(result);
    }
    /**
     * Getting a user activation code. The code is returned via the appropriate user notification method
     * @param {string} marker - The text identifier of the authorization provider. Example - email
     * @param {string} userIdentifier - The text identifier of the user's object (user login)
     * @param {string} eventIdentifier - Text identifier of the event object for which the code is generated
     */
    async generateCode(marker, userIdentifier, eventIdentifier) {
        const data = {
            "userIdentifier": userIdentifier,
            "eventIdentifier": eventIdentifier
        };
        const result = await this._fetchPost(`/marker/${marker}/users/generate-code`, data);
    }
    /**
     * User activation code verification. Returns true (if the code is correct) or false (if it is incorrect).
     * @param {string} marker - The text identifier of the authorization provider. Example - email
     * @param {string} userIdentifier - The text identifier of the user's object (user login)
     * @param {string} code - Service code
     */
    async checkCode(marker, userIdentifier, code) {
        const data = {
            "userIdentifier": userIdentifier,
            "code": code
        };
        const result = await this._fetchPost(`/marker/${marker}/users/check-code`, data);
        return result;
    }
    /**
     * User activate.
     * @param {string} marker - The text identifier of the authorization provider. Example - email
     * @param {string} userIdentifier - The text identifier of the user's object (user login)
     * @param {string} code - Service code
     */
    async activateUser(marker, userIdentifier, code) {
        const data = {
            "userIdentifier": userIdentifier,
            "code": code
        };
        const result = await this._fetchPost(`/marker/${marker}/users/activate`, data);
        return result;
    }
    /**
     * User authorization
     * @param {string} marker - The text identifier of the authorization provider. Example - email
     * @param {IAuthPostBody} data - Array of objects contains auth information
     *
     * @example
     * const data = {
     *   authData: [
     *     {
     *       marker: "login",
     *       value: "test"
     *     },
     *     {
     *       marker: "password",
     *       value: "12345"
     *     }
     *   ]
     * }
     *
     */
    async auth(marker, data) {
        const result = await this._fetchPost(`/marker/${marker}/users/auth`, data);
        this.state.accessToken = result.accessToken;
        this.state.refreshToken = result.refreshToken;
        if (this.state.saveFunction) {
            this.state.saveFunction(result.refreshToken);
        }
        return result;
    }
    /**
     * Refresh token
     * @param {string} marker - The text identifier of the authorization provider. Example - email
     * @param {string} token - Refresh token
     *
     */
    async refresh(marker, token) {
        const data = { refreshToken: token };
        const result = await this._fetchPost(`/marker/${marker}/users/refresh`, data);
        this.state.accessToken = result.accessToken;
        this.state.refreshToken = result.refreshToken;
        if (this.state.saveFunction) {
            this.state.saveFunction(result.refreshToken);
        }
        return result;
    }
    /**
     *
     * User logout.
     * @param {string} marker - The text identifier of the authorization provider. Example - email
     * @param {string} token - Refresh token
     *
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     */
    async logout(marker, token) {
        const data = {
            "refreshToken": token
        };
        const result = await this._fetchPost(`/marker/${marker}/users/logout`, data);
        if (result) {
            this.state.accessToken = undefined;
            this.state.refreshToken = undefined;
            if (this.state.saveFunction) {
                this.state.saveFunction('');
            }
        }
        return result;
    }
    /**
     * Change password
     * @param {string} marker - The text identifier of the authorization provider. Example - email
     * @param {string} userIdentifier - The text identifier of the user's object (user login)
     * @param {string} code - Service code
     * @param {number} type - Operation type (1 - for changing password, 2 - for recovery)
     * @param {string} newPassword - New password
     * @param {string} [repeatPassword] - Optional variable contains repeat new password for validation
     */
    async changePassword(marker, userIdentifier, type, code, newPassword, repeatPassword) {
        const data = {
            "userIdentifier": userIdentifier,
            "code": code,
            "type": type,
            "password1": newPassword,
            "password2": repeatPassword !== null && repeatPassword !== void 0 ? repeatPassword : newPassword
        };
        const result = await this._fetchPost(`/marker/${marker}/users/change-password`, data);
        return result;
    }
    /**
     * Get all auth providers objects
     * @param {string} [langCode] - Language code. Default "en_US"
     * @param {number} [offset] - Parameter for pagination. Default 0
     * @param {number} [limit] - Parameter for pagination. Default 30
     */
    async getAuthProviders(langCode = this.state.lang, offset = 0, limit = 30) {
        const result = await this._fetchGet(`?langCode=${langCode}&offset=${offset}&limit=${limit}`);
        return this._normalizeData(result);
    }
    /**
     * Get one auth provider object by marker
     * @param {string} marker - The text identifier of the authorization provider. Example - email
     * @param {string} [langCode] - Optional parameter language code. Default "en_US"
     */
    async getMarker(marker, langCode = this.state.lang) {
        const result = await this._fetchGet(`/marker/${marker}?langCode=${langCode}`);
        return this._normalizeData(result);
    }
}
exports.default = AuthProviderApi;
