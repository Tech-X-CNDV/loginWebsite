import { ILocalizeInfo } from "../base/utils";
/**
 * Represents a interface object of User Auth Provider Api.
 *
 * @property {function} signUp - User registration.
 * @property {function} generateCode - Getting a user activation code.
 * @property {function} checkCode - User activation code verification.
 * @property {function} activateUser - User activate.
 * @property {function} auth - User authorization.
 * @property {function} refresh - Refresh token.
 * @property {function} logout - User logout.
 * @property {function} changePassword - Change password.
 * @property {function} getAuthProviders - Get all auth providers objects.
 * @property {function} getMarker - Get one auth provider object by marker.
 */
interface IAuthProvider {
    signUp(marker: string, data: ISignUpData, langCode?: string): Promise<ISignUpEntity>;
    generateCode(marker: string, userIdentifier: string, eventIdentifier: string): Promise<void>;
    checkCode(marker: string, userIdentifier: string, code: string): Promise<boolean>;
    activateUser(marker: string, userIdentifier: string, code: string): Promise<boolean>;
    auth(marker: string, data: IAuthPostBody): Promise<IAuthEntity>;
    refresh(marker: string, token: string): Promise<IAuthEntity>;
    logout(marker: string, token: string): Promise<boolean>;
    changePassword(marker: string, userIdentifier: string, type: number, code: string, newPassword: string, repeatPassword?: string): Promise<boolean>;
    getAuthProviders(langCode?: string, offset?: number, limit?: number): Promise<Array<IAuthProvidersEntity>>;
    getMarker(marker: string, langCode?: string): Promise<IAuthProvidersEntity>;
}
interface IAuthFormData {
    marker: string;
    type: string;
    value: string;
}
interface ISignUpData {
    formIdentifier: string;
    langCode?: string;
    authData: Array<{
        marker: string;
        value: string;
    }>;
    formData: IAuthFormData | Array<IAuthFormData>;
    notificationData: {
        email: string;
        phonePush: string;
        phoneSMS: string;
    };
}
interface ISignUpEntity {
    id: number;
    updatedDate: string;
    version: number;
    identifier: string;
    isActive: boolean;
    formData: Array<{
        marker: string;
        value: string;
    }>;
    notificationData: {
        email: string;
        phonePush: string;
        phoneSMS: string;
    };
    locale: string;
}
interface ICodeEntity {
    code: string;
    expiredDate: string;
}
interface IAuthEntity {
    userIdentifier: string;
    authProviderIdentifier: string;
    accessToken: string;
    refreshToken: string;
}
interface IAuthProvidersEntity {
    id: number;
    localizeInfos: ILocalizeInfo;
    version: number;
    identifier: string;
    isActive: boolean;
    isCheckCode: boolean;
    type: string;
    formIdentifier: string | null;
    config: Record<string, any>;
}
interface IAuthPostBody {
    authData: Array<{
        marker: string;
        value: string | number;
    }>;
}
export { IAuthProvider, IAuthFormData, ISignUpData, ISignUpEntity, ICodeEntity, IAuthEntity, IAuthProvidersEntity, IAuthPostBody, };
