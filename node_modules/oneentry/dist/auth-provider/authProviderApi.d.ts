import AsyncModules from "../base/asyncModules";
import { IAuthProvider, ISignUpData, ISignUpEntity, IAuthEntity, IAuthProvidersEntity, IAuthPostBody } from "./authProvidersInterfaces";
import StateModule from "../base/stateModule";
/**
 * Controllers for working with auth services.
 */
export default class AuthProviderApi extends AsyncModules implements IAuthProvider {
    protected state: StateModule;
    protected _url: string;
    constructor(state: StateModule);
    /**
     * User registration
     * @param {string} marker - The text identifier of the authorization provider. Example - email
     * @param data - Request body
     * @param {string} langCode - Optional language field
     *
     * @example
     * const data = {
     *   "formIdentifier": "reg",
     *   "authData": [
     *     {
     *       "marker": "login",
     *       "value": "example@oneentry.cloud"
     *     },
     *     {
     *       "marker": "password",
     *       "value": "12345"
     *     }
     *   ],
     *   "formData": [
     *       {
     *         "marker": "last_name",
     *         "type": "string",
     *         "value": "Name"
     *       }
     *   ],
     *   "notificationData": {
     *     "email": "example@oneentry.cloud",
     *     "phonePush": "+99999999999",
     *     "phoneSMS": "+99999999999"
     *   }
     * }
     */
    signUp(marker: string, data: ISignUpData, langCode?: string): Promise<ISignUpEntity>;
    /**
     * Getting a user activation code. The code is returned via the appropriate user notification method
     * @param {string} marker - The text identifier of the authorization provider. Example - email
     * @param {string} userIdentifier - The text identifier of the user's object (user login)
     * @param {string} eventIdentifier - Text identifier of the event object for which the code is generated
     */
    generateCode(marker: string, userIdentifier: string, eventIdentifier: string): Promise<void>;
    /**
     * User activation code verification. Returns true (if the code is correct) or false (if it is incorrect).
     * @param {string} marker - The text identifier of the authorization provider. Example - email
     * @param {string} userIdentifier - The text identifier of the user's object (user login)
     * @param {string} code - Service code
     */
    checkCode(marker: string, userIdentifier: string, code: string): Promise<boolean>;
    /**
     * User activate.
     * @param {string} marker - The text identifier of the authorization provider. Example - email
     * @param {string} userIdentifier - The text identifier of the user's object (user login)
     * @param {string} code - Service code
     */
    activateUser(marker: string, userIdentifier: string, code: string): Promise<boolean>;
    /**
     * User authorization
     * @param {string} marker - The text identifier of the authorization provider. Example - email
     * @param {IAuthPostBody} data - Array of objects contains auth information
     *
     * @example
     * const data = {
     *   authData: [
     *     {
     *       marker: "login",
     *       value: "test"
     *     },
     *     {
     *       marker: "password",
     *       value: "12345"
     *     }
     *   ]
     * }
     *
     */
    auth(marker: string, data: IAuthPostBody): Promise<IAuthEntity>;
    /**
     * Refresh token
     * @param {string} marker - The text identifier of the authorization provider. Example - email
     * @param {string} token - Refresh token
     *
     */
    refresh(marker: string, token: string): Promise<IAuthEntity>;
    /**
     *
     * User logout.
     * @param {string} marker - The text identifier of the authorization provider. Example - email
     * @param {string} token - Refresh token
     *
     * @description This method requires user authorization. For more information about configuring the authorization module, see the documentation in the configuration settings section of the SDK.
     */
    logout(marker: string, token: string): Promise<boolean>;
    /**
     * Change password
     * @param {string} marker - The text identifier of the authorization provider. Example - email
     * @param {string} userIdentifier - The text identifier of the user's object (user login)
     * @param {string} code - Service code
     * @param {number} type - Operation type (1 - for changing password, 2 - for recovery)
     * @param {string} newPassword - New password
     * @param {string} [repeatPassword] - Optional variable contains repeat new password for validation
     */
    changePassword(marker: string, userIdentifier: string, type: number, code: string, newPassword: string, repeatPassword?: string): Promise<boolean>;
    /**
     * Get all auth providers objects
     * @param {string} [langCode] - Language code. Default "en_US"
     * @param {number} [offset] - Parameter for pagination. Default 0
     * @param {number} [limit] - Parameter for pagination. Default 30
     */
    getAuthProviders(langCode?: string, offset?: number, limit?: number): Promise<Array<IAuthProvidersEntity>>;
    /**
     * Get one auth provider object by marker
     * @param {string} marker - The text identifier of the authorization provider. Example - email
     * @param {string} [langCode] - Optional parameter language code. Default "en_US"
     */
    getMarker(marker: string, langCode?: string): Promise<IAuthProvidersEntity>;
}
